Index: lib_http/src/main/java/com/xhttp/lib/BaseHttpUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib;\r\n\r\nimport android.app.Dialog;\r\nimport android.content.Context;\r\nimport android.os.Handler;\r\nimport android.os.Looper;\r\nimport android.util.Log;\r\n\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpConfig;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.impl.data.DefaultDataListener;\r\nimport com.xhttp.lib.impl.file.DefaultFileService;\r\nimport com.xhttp.lib.impl.message.MessageManager;\r\nimport com.xhttp.lib.impl.service.DefaultHttpService;\r\nimport com.xhttp.lib.interfaces.callback.IFileUploadListener;\r\nimport com.xhttp.lib.interfaces.callback.IHttpFileResultCallBack;\r\nimport com.xhttp.lib.interfaces.callback.IHttpResultCallBack;\r\nimport com.xhttp.lib.interfaces.data.IDataListener;\r\nimport com.xhttp.lib.interfaces.data.IDataListenerFilter;\r\nimport com.xhttp.lib.interfaces.file.IFileService;\r\nimport com.xhttp.lib.interfaces.http.IHttpService;\r\nimport com.xhttp.lib.interfaces.http.IHttpServiceFilter;\r\nimport com.xhttp.lib.interfaces.message.IMessageManager;\r\nimport com.xhttp.lib.interfaces.message.IMessageManagerFilter;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\nimport com.xhttp.lib.util.BaseThreadPoolUtil;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.UUID;\r\n\r\nimport static com.xhttp.lib.config.BaseHttpConfig.TAG;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic final class BaseHttpUtils {\r\n    // 唯一标识\r\n    private String tags = \"\";\r\n    private static Context contextStatic;\r\n    // 是否打开Log日志\r\n    private static boolean openLogStatic = true;\r\n\r\n    public static void init(Context context, boolean openLogs) {\r\n        contextStatic = context;\r\n        openLogStatic = openLogs;\r\n    }\r\n\r\n    private Boolean openLog = null;\r\n\r\n    public BaseHttpUtils initOpenLog(boolean openLog) {\r\n        this.openLog = openLog;\r\n        return this;\r\n    }\r\n\r\n    // 检查Log开关\r\n    public boolean checkLog() {\r\n        if (openLog == null) {\r\n            return openLogStatic;\r\n        }\r\n        return openLog;\r\n    }\r\n\r\n    // 发送请求封装类\r\n    private BaseHttpParams baseHttpParams;\r\n    // 返回值封装类\r\n    private BaseResult baseResult;\r\n\r\n    public BaseHttpUtils() {\r\n        this(new BaseHttpParams());\r\n    }\r\n\r\n    public BaseHttpUtils(Dialog dialog) {\r\n        this(new BaseHttpParams());\r\n        this.dialog = dialog;\r\n    }\r\n\r\n    private BaseHttpUtils(BaseHttpParams baseHttpParams) {\r\n        if (contextStatic == null) {\r\n            throw new RuntimeException(\"请在application中调用init(Context context,boolean openLogs)方法，并且context!=null\");\r\n        }\r\n        this.baseHttpParams = baseHttpParams;\r\n        this.baseResult = new BaseResult();\r\n\r\n        tags = UUID.randomUUID().toString();\r\n//        tags = System.currentTimeMillis() + \"\";\r\n        this.baseHttpParams.tags = tags;\r\n        if (iHttpServiceStatic == null) {\r\n            // 默认\r\n            iHttpServiceStatic = DefaultHttpService.class;\r\n        }\r\n        if (iDataListenerStatic == null) {\r\n            // 默认\r\n            iDataListenerStatic = DefaultDataListener.class;\r\n        }\r\n        if (iMessageManagerStatic == null) {\r\n            // 默认\r\n            iMessageManagerStatic = MessageManager.class;\r\n        }\r\n        if (iFileServiceStatic == null) {\r\n            // 默认\r\n            iFileServiceStatic = DefaultFileService.class;\r\n        }\r\n        if(iFileDataStatic == null){\r\n            // 默认\r\n            iFileDataStatic = DefaultFileService.class;\r\n        }\r\n    }\r\n\r\n    /************************ 请求参数 ********************************/\r\n    /**\r\n     * 全局的 请求工具类 iHttpServiceStatic 和 数据解析类 iDataListenerStatic\r\n     * 会被 initIHttpService 和 initIDataListener中设置的值覆盖掉\r\n     */\r\n    public static Class iHttpServiceStatic;\r\n    public static Class iDataListenerStatic;\r\n    public static Class iFileServiceStatic;\r\n    public static Class iFileDataStatic;\r\n\r\n    private IHttpService iHttpServiceCurr;\r\n    private IDataListener iDataListenerCurr;\r\n    private IFileService iFileServiceCurr;\r\n    private IDataListener iFileDataListenerCurr;\r\n\r\n    // 初始化设置 全局的 请求工具类 和 数据解析类\r\n    public static void init(Class iHttpServiceStatics, Class iDataListenerStatics) {\r\n        if (iHttpServiceStatics != null && IHttpService.class.isAssignableFrom(iHttpServiceStatics)) {\r\n            iHttpServiceStatic = iHttpServiceStatics;\r\n        } else if (iHttpServiceStatics != null) {\r\n            throw new RuntimeException(\"初始化请求工具类和数据解析类时类型错误\");\r\n        }\r\n        if (iDataListenerStatics != null && IDataListener.class.isAssignableFrom(iDataListenerStatics)) {\r\n            iDataListenerStatic = iDataListenerStatics;\r\n        } else if (iDataListenerStatics != null) {\r\n            throw new RuntimeException(\"初始化请求工具类和数据解析类时类型错误\");\r\n        }\r\n    }\r\n\r\n\r\n    // 初始化设置 全局的 请求工具类 和 数据解析类(如果没有调用，则会使用默认的)\r\n    public static void initFile(Class iHttpServiceStatics, Class iDataListenerStatics) {\r\n        if (iHttpServiceStatics != null && IFileService.class.isAssignableFrom(iHttpServiceStatics)) {\r\n            iFileServiceStatic = iHttpServiceStatics;\r\n        } else if (iHttpServiceStatics != null) {\r\n            throw new RuntimeException(\"初始化请求工具类和数据解析类时类型错误\");\r\n        }\r\n        if (iDataListenerStatics != null && IDataListener.class.isAssignableFrom(iDataListenerStatics)) {\r\n            iFileDataStatic = iDataListenerStatics;\r\n        } else if (iDataListenerStatics != null) {\r\n            throw new RuntimeException(\"初始化请求工具类和数据解析类时类型错误\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 针对 本次请求的 请求工具类 iHttpService 和 数据解析类 iDataListener\r\n     * 会覆盖全局的 请求工具类 iHttpServiceStatic 和 数据解析类 iDataListenerStatic\r\n     */\r\n    // 网络请求工具类处理\r\n    private IHttpServiceFilter iHttpServiceFilter;\r\n    // 数据解析工具类处理\r\n    private IDataListenerFilter iDataListenerFilter;\r\n\r\n    // 设置 网络请求工具类\r\n    public BaseHttpUtils initIHttpService(IHttpService iHttpService) {\r\n        this.iHttpServiceCurr = iHttpService;\r\n        return this;\r\n    }\r\n\r\n    // 对设置好的 IHttpService 进行处理\r\n    public BaseHttpUtils initIHttpServiceFilter(IHttpServiceFilter iHttpServiceFilter) {\r\n        this.iHttpServiceFilter = iHttpServiceFilter;\r\n        return this;\r\n    }\r\n\r\n    // 设置 数据解析工具类\r\n    public BaseHttpUtils initIDataListener(IDataListener iDataListener) {\r\n        this.iDataListenerCurr = iDataListener;\r\n        return this;\r\n    }\r\n\r\n    // 对设置好的  IDataListener 进行处理\r\n    public BaseHttpUtils initIDataListenerFilter(IDataListenerFilter iDataListenerFilter) {\r\n        this.iDataListenerFilter = iDataListenerFilter;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置请求路径 url\r\n     *\r\n     * @param url\r\n     */\r\n    public BaseHttpUtils initUrl(String url) {\r\n        baseHttpParams.url = url;\r\n        return this;\r\n    }\r\n\r\n    // initParams 只针对 post请求,get请求不处理params\r\n\r\n    /**\r\n     * 设置请求参数1 params\r\n     * initParams(key,value,key,value....)\r\n     *\r\n     * @param params\r\n     */\r\n    public BaseHttpUtils initParams(Object... params) {\r\n        baseHttpParams.params = params;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置请求参数2 params\r\n     * key=value&key=value\r\n     *\r\n     * @param params\r\n     */\r\n    public BaseHttpUtils initParams(String params) {\r\n        baseHttpParams.params = params;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置请求参数 params\r\n     * Map参数\r\n     *\r\n     * @param params\r\n     */\r\n    public BaseHttpUtils initParams(Map params) {\r\n        baseHttpParams.params = params;\r\n        return this;\r\n    }\r\n\r\n    // 可以拓展\r\n//    public BaseHttpUtils initJsonParams(String json){}\r\n\r\n    /**\r\n     * 设置请求方式 RequestType   post  get ...\r\n     *\r\n     * @param type\r\n     */\r\n    public BaseHttpUtils initRequestType(BaseHttpConfig.RequestType type) {\r\n        baseHttpParams.request_type = type;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置超时时间\r\n     *\r\n     * @param timeOut\r\n     */\r\n    public BaseHttpUtils initConnectTimeOut(int timeOut) {\r\n        baseHttpParams.timeout_connect = timeOut;\r\n        return this;\r\n    }\r\n\r\n    public BaseHttpUtils initReadTimeOut(int timeOut) {\r\n        baseHttpParams.timeout_read = timeOut;\r\n        return this;\r\n    }\r\n\r\n    public BaseHttpUtils initTimeOut(int timeOut) {\r\n        baseHttpParams.timeout_connect = timeOut;\r\n        baseHttpParams.timeout_read = timeOut;\r\n        return this;\r\n    }\r\n\r\n\r\n    /************************返回值********************************/\r\n\r\n    /**\r\n     * 设置返回值 解析模式\r\n     *\r\n     * @param dataParseType\r\n     */\r\n    public BaseHttpUtils initDataParseType(BaseHttpConfig.DataParseType dataParseType) {\r\n        baseHttpParams.dataParseType = dataParseType;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置返回值 解析类型\r\n     *\r\n     * @param tClass\r\n     */\r\n    public BaseHttpUtils initClass(Class tClass) {\r\n        baseHttpParams.aClass = tClass;\r\n        return this;\r\n    }\r\n\r\n\r\n    /************************ 其他设置 ********************************/\r\n\r\n    /**\r\n     * 请求回调\r\n     */\r\n    IHttpResultCallBack iResultCallBack;\r\n\r\n    public BaseHttpUtils initHttpResultCallBack(IHttpResultCallBack iResultCallBack) {\r\n        this.iResultCallBack = iResultCallBack;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 请求回调提示语句工具类\r\n     */\r\n    static Class iMessageManagerStatic;\r\n\r\n    public static void init(Class iMessageManagerStatics) {\r\n        if (iMessageManagerStatics != null && IMessageManager.class.isAssignableFrom(iMessageManagerStatics)) {\r\n            iMessageManagerStatic = iMessageManagerStatics;\r\n        } else if (iMessageManagerStatics != null) {\r\n            throw new RuntimeException(\"初始化提示语句工具类时类型错误\");\r\n        }\r\n    }\r\n\r\n    IMessageManager iMessageManager;\r\n    IMessageManagerFilter iMessageManagerFilter;\r\n\r\n    public BaseHttpUtils initIMessageManager(IMessageManager iMessageManager) {\r\n        this.iMessageManager = iMessageManager;\r\n        return this;\r\n    }\r\n\r\n    public BaseHttpUtils initIMessageManagerFilter(IMessageManagerFilter iMessageManagerFilter) {\r\n        this.iMessageManagerFilter = iMessageManagerFilter;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置是否显示提示语句 默认显示\r\n     */\r\n    boolean isShowMessage = true;\r\n\r\n    public BaseHttpUtils initShowMessage(boolean isShowMessage) {\r\n        this.isShowMessage = isShowMessage;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置是否显示错误时提示语句 默认显示\r\n     */\r\n    boolean isShowErrorMessage = true;\r\n\r\n    public BaseHttpUtils initShowErrorMessage(boolean isShowErrorMessage) {\r\n        this.isShowErrorMessage = isShowErrorMessage;\r\n        return this;\r\n    }\r\n\r\n    String errorMsg = \"\";\r\n\r\n    public BaseHttpUtils initErrorMsg(String errorMsg) {\r\n        this.errorMsg = errorMsg;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置是否显示空数据时提示语句 默认null 列表模式下不显示\r\n     * 如果列表模式下想设置显示 可调用此方法 initShowEmptyMessage(true)\r\n     */\r\n    Boolean isShowEmptyMessage = null;\r\n\r\n    public BaseHttpUtils initShowEmptyMessage(Boolean isShowEmptyMessage) {\r\n        this.isShowEmptyMessage = isShowEmptyMessage;\r\n        return this;\r\n    }\r\n\r\n    String emptyMsg = \"\";\r\n\r\n    public BaseHttpUtils initEmptyMsg(String emptyMsg) {\r\n        this.emptyMsg = emptyMsg;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置是否显示正确时提示语句 默认不显示\r\n     */\r\n    boolean isShowSuccessMessage = false;\r\n\r\n    public BaseHttpUtils initShowSuccessMessage(boolean isShowSuccessMessage) {\r\n        this.isShowSuccessMessage = isShowSuccessMessage;\r\n        return this;\r\n    }\r\n\r\n    String successMsg = \"请求成功\";\r\n\r\n    public BaseHttpUtils initSuccessMsg(String successMsg) {\r\n        this.successMsg = successMsg;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置加载提示框\r\n     *\r\n     * @param dialog\r\n     */\r\n    Dialog dialog;\r\n\r\n    public BaseHttpUtils initDialog(Dialog dialog) {\r\n        this.dialog = dialog;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 dialog是否消失 默认最后必须消失\r\n     *\r\n     * @param isDialogDismiss\r\n     */\r\n    boolean isDialogDismiss = true;\r\n\r\n    public BaseHttpUtils initDialogDismiss(boolean isDialogDismiss) {\r\n        this.isDialogDismiss = isDialogDismiss;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 dialog请求成功时是否消失 默认最后必须消失\r\n     *\r\n     * @param isDialogDismiss\r\n     */\r\n    boolean isDialogDismissWhenSuccess = true;\r\n\r\n    public BaseHttpUtils initDialogDismissWhenSuccess(boolean isDialogDismissWhenSuccess) {\r\n        this.isDialogDismissWhenSuccess = isDialogDismissWhenSuccess;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 dialog请求结果是空数据是否消失 默认最后必须消失\r\n     *\r\n     * @param isDialogDismiss\r\n     */\r\n    boolean isDialogDismissWhenEmpty = true;\r\n\r\n    public BaseHttpUtils initDialogDismissWhenEmpty(boolean isDialogDismissWhenEmpty) {\r\n        this.isDialogDismissWhenEmpty = isDialogDismissWhenEmpty;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 设置 dialog请求失败时是否消失 默认最后必须消失\r\n     *\r\n     * @param isDialogDismiss\r\n     */\r\n    boolean isDialogDismissWhenFail = true;\r\n\r\n    public BaseHttpUtils initDialogDismissWhenFail(boolean isDialogDismissWhenFail) {\r\n        this.isDialogDismissWhenFail = isDialogDismissWhenFail;\r\n        return this;\r\n    }\r\n\r\n    public BaseHttpUtils dismissDialog() {\r\n        if (null != dialog && dialog.isShowing()) {\r\n            dialog.dismiss();\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * 发送请求\r\n     */\r\n    private final Handler mHandler = new Handler(Looper.getMainLooper());\r\n\r\n\r\n    // post\r\n    public void postList(Class clz) {\r\n        baseHttpParams.aClass = clz;\r\n        postList();\r\n    }\r\n\r\n    public void postList() {\r\n        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.List;\r\n        post();\r\n    }\r\n\r\n    public void postObject(Class clz) {\r\n        baseHttpParams.aClass = clz;\r\n        postObject();\r\n    }\r\n\r\n    public void postObject() {\r\n        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.Object;\r\n        post();\r\n    }\r\n\r\n    public void post() {\r\n        baseHttpParams.request_type = BaseHttpConfig.RequestType.POST;\r\n        request();\r\n    }\r\n\r\n    // get\r\n    public void getList(Class clz) {\r\n        baseHttpParams.aClass = clz;\r\n        getList();\r\n    }\r\n\r\n    public void getList() {\r\n        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.List;\r\n        get();\r\n    }\r\n\r\n    public void getObject(Class clz) {\r\n        baseHttpParams.aClass = clz;\r\n        getObject();\r\n    }\r\n\r\n    public void getObject() {\r\n        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.Object;\r\n        get();\r\n    }\r\n\r\n    public void get() {\r\n        baseHttpParams.request_type = BaseHttpConfig.RequestType.GET;\r\n        request();\r\n    }\r\n\r\n\r\n    // 网络请求要在线程中进行\r\n    public void request() {\r\n        if (Looper.myLooper() == Looper.getMainLooper()) {\r\n            BaseThreadPoolUtil.execute(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    requests();\r\n                }\r\n            });\r\n        } else {\r\n            requests();\r\n        }\r\n    }\r\n\r\n    // 请求方法\r\n    private void requests() {\r\n        mHandler.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (iResultCallBack != null) {\r\n                    iResultCallBack.onBeforeRequest(baseHttpParams);\r\n                }\r\n            }\r\n        });\r\n        // log开关设置\r\n        baseHttpParams.openLog = checkLog();\r\n        // 设置空数据时提示语句是否显示, 如果调用过 initShowEmptyMessage方法,则该方法不调用\r\n        settingEmptyMessage();\r\n        // messageManager设置\r\n        settingMessageManager();\r\n        // 检查一些基本设置\r\n        if (!settingDefaultParams()) {\r\n            return;\r\n        }\r\n        if (!settingHttpServiceAndDataListener()) {\r\n            return;\r\n        }\r\n        if (!callHttpRequest()) {\r\n            return;\r\n        }\r\n        if (!callDataParse()) {\r\n            return;\r\n        }\r\n\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(BaseHttpConfig.TAG, tags + \": 请求完成,返回成功\");\r\n        }\r\n        mHandler.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (isDialogDismiss && isDialogDismissWhenSuccess) {\r\n                    dismissDialog();\r\n                }\r\n                if (iMessageManager != null && isShowMessage && isShowSuccessMessage) {\r\n                    iMessageManager.showMessages(contextStatic, \"\".equals(successMsg) ? baseResult.errorInfo.errorMsg : successMsg);\r\n                }\r\n                if (iResultCallBack != null) {\r\n                    iResultCallBack.onSuccess(baseResult);\r\n                    iResultCallBack.onFinal(baseResult);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    // 设置空数据时提示语句是否显示, 如果调用过 initShowEmptyMessage方法,则该方法不调用\r\n    private void settingEmptyMessage() {\r\n        if (isShowEmptyMessage == null) {\r\n            // 默认模式 列表模式下不显示\r\n            if (baseHttpParams.dataParseType == BaseHttpConfig.DataParseType.List) {\r\n                isShowEmptyMessage = false;\r\n            } else {\r\n                isShowEmptyMessage = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // messageManager设置\r\n    private void settingMessageManager() {\r\n        try {\r\n            iMessageManager = iMessageManager == null ? (IMessageManager) iMessageManagerStatic.newInstance() : iMessageManager;\r\n            if (iMessageManagerFilter != null && iMessageManager != null) {\r\n                iMessageManagerFilter.filterIMessageManager(iMessageManager);\r\n            }\r\n        } catch (IllegalAccessException e) {\r\n            e.printStackTrace();\r\n        } catch (InstantiationException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean settingDefaultParams() {\r\n        if (baseHttpParams.aClass == null && baseHttpParams.dataParseType != BaseHttpConfig.DataParseType.String) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \":错误描述_ 请设置好需要解析的对象类型\");\r\n            }\r\n            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n            baseResult.errorInfo.errorMsg = \"请设置好需要解析的对象类型\";\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailUse(baseResult.errorInfo);\r\n                        iResultCallBack.onFail(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    // 根据传入的值 初始化 IHttpService 和 IDataListener\r\n    private boolean settingHttpServiceAndDataListener() {\r\n        /******************** 发送前检查 ***********************/\r\n        baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n        try {\r\n            // 获取当前的 数据请求工具类\r\n            iHttpServiceCurr = iHttpServiceCurr == null ? (IHttpService) (iHttpServiceStatic == null ? null : iHttpServiceStatic.newInstance()) : iHttpServiceCurr;\r\n            // 获取当前的 数据解析工具类\r\n            iDataListenerCurr = iDataListenerCurr == null ? (IDataListener) (iDataListenerStatic == null ? null : iDataListenerStatic.newInstance()) : iDataListenerCurr;\r\n        } catch (IllegalAccessException e) {\r\n            e.printStackTrace();\r\n        } catch (InstantiationException e) {\r\n            e.printStackTrace();\r\n        }\r\n        // 检查调用方式是否正确\r\n        if ((iHttpServiceCurr == null || iDataListenerCurr == null)) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \": 请先初始化设置好请求和解析工具类\");\r\n            }\r\n            baseResult.errorInfo.errorMsg = \"请先初始化设置好请求和解析工具类\";\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailUse(baseResult.errorInfo);\r\n                        iResultCallBack.onFail(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        } else {\r\n            if (iHttpServiceFilter != null && iHttpServiceCurr != null) {\r\n                iHttpServiceFilter.filterIHttpService(iHttpServiceCurr);\r\n            }\r\n            if (iDataListenerFilter != null && iDataListenerCurr != null) {\r\n                iDataListenerFilter.filterIDataListener(iDataListenerCurr);\r\n            }\r\n            // filterIHttpService 和 filterIDataListener 以后 再做一次非空判断\r\n            if ((iHttpServiceCurr == null || iDataListenerCurr == null)) {\r\n                if (baseHttpParams.openLog) {\r\n                    Log.e(BaseHttpConfig.TAG, tags + \": filterIHttpService 和 filterIDataListener 方法不能设置参数为null\");\r\n                }\r\n                baseResult.errorInfo.errorMsg = \"filterIHttpService 和 filterIDataListener 方法不能设置参数为null\";\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                            dismissDialog();\r\n                        }\r\n                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                        }\r\n                        if (iResultCallBack != null) {\r\n                            iResultCallBack.onFailUse(baseResult.errorInfo);\r\n                            iResultCallBack.onFail(baseResult.errorInfo);\r\n                            iResultCallBack.onFinal(baseResult);\r\n                        }\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // 发送请求\r\n    private boolean callHttpRequest() {\r\n        /******************** 发送请求 ***********************/\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(BaseHttpConfig.TAG, tags + \": 开始发送网络请求...\");\r\n        }\r\n        mHandler.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (iResultCallBack != null) {\r\n                    iResultCallBack.onRequest(baseHttpParams);\r\n                }\r\n            }\r\n        });\r\n        if (\"\".equals(baseHttpParams.url) || null == baseHttpParams.url) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \":错误描述_ url不能为空\");\r\n            }\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    baseResult.errorInfo.errorMsg = \"url不能为空\";\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailUse(baseResult.errorInfo);\r\n                        iResultCallBack.onFail(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        Object params = iHttpServiceCurr.parseParams(baseHttpParams);\r\n        if (params == null) {\r\n            params = \"\";\r\n        }\r\n        baseHttpParams.params = params;\r\n\r\n        final BaseRequestResult baseRequestResult = iHttpServiceCurr.request(baseHttpParams);\r\n        if (baseRequestResult == null || !baseRequestResult.checkResult()) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \":错误描述_ IHttpService的request方法中 返回值BaseRequestResult不符合规定\");\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    BaseErrorInfo baseErrorInfos = new BaseErrorInfo();\r\n                    baseErrorInfos.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n                    baseErrorInfos.errorMsg = \"IHttpService的request方法中 返回值BaseRequestResult不符合规定\";\r\n                    baseResult.errorInfo = baseErrorInfos;\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailRequest(baseErrorInfos);\r\n                        iResultCallBack.onFail(baseErrorInfos);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.baseRequestResult = baseRequestResult;\r\n        if (!baseRequestResult.isSuccess) {\r\n            baseResult.success = false;\r\n            baseResult.errorInfo = baseRequestResult.errorInfo;\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailRequest(baseResult.errorInfo);\r\n                        iResultCallBack.onFail(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.baseRequestResult.isSuccess = true;\r\n        return true;\r\n    }\r\n\r\n    // 数据解析\r\n    private boolean callDataParse() {\r\n        /******************** 解析返回值 ***********************/\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(BaseHttpConfig.TAG, tags + \": 开始解析返回值...\");\r\n        }\r\n        mHandler.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (iResultCallBack != null) {\r\n                    iResultCallBack.onBeforeDataParse(baseHttpParams, baseResult);\r\n                }\r\n            }\r\n        });\r\n        byte[] bytes = baseResult.baseRequestResult.bytes;\r\n\r\n        baseResult.result = new BaseResult.Result();\r\n        baseResult.result.resultAll = new String(bytes);\r\n        baseResult.result.resultData = baseResult.result.resultAll;\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(TAG, baseHttpParams.tags + \":返回值的结果是: \" + baseResult.result.resultAll);\r\n        }\r\n        String resultData = \"\";\r\n        try {\r\n            resultData = iDataListenerCurr.parseResult(baseHttpParams, bytes);\r\n        } catch (Exception e) {\r\n            resultData = \"\";\r\n\r\n            baseResult.success = false;\r\n            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;\r\n            baseResult.errorInfo.exception = e;\r\n            baseResult.errorInfo.errorMsg = \"IDataListener parseResult方法出现异常,异常信息为:\" + e;\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ IDataListener parseResult方法出现异常,异常信息为:\" + e);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailRequest(baseResult.errorInfo);\r\n                        iResultCallBack.onFail(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.result.resultData = resultData;\r\n\r\n        if (resultData != null && !\"\".equals(resultData) && !\"null\".equals(resultData)) {\r\n            try {\r\n                switch (baseHttpParams.dataParseType) {\r\n                    case List:\r\n                        baseResult.result.setResult_list(iDataListenerCurr.parseList(baseHttpParams, resultData));\r\n                        break;\r\n                    case Object:\r\n                        baseResult.result.setResult_object(iDataListenerCurr.parseObject(baseHttpParams, resultData));\r\n                        break;\r\n                    case Combination:\r\n                        baseResult.result.setResult_list_combination(iDataListenerCurr.parseCombination(baseHttpParams, resultData));\r\n                        break;\r\n                    case String:\r\n                        baseResult.result.setResult_str(iDataListenerCurr.parseDefault(baseHttpParams, resultData));\r\n                    default:\r\n                        break;\r\n                }\r\n            } catch (Exception e) {\r\n                baseResult.success = false;\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;\r\n                baseResult.errorInfo.exception = e;\r\n                baseResult.errorInfo.errorMsg = \"IDataListener 返回值解析异常,异常信息为:\" + e;\r\n\r\n                if (baseHttpParams.openLog) {\r\n                    Log.e(TAG, baseHttpParams.tags + \":错误描述_ IDataListener 返回值解析异常,异常信息为:\" + e);\r\n                }\r\n                // 请求结果出现异常\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                            dismissDialog();\r\n                        }\r\n                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                        }\r\n                        if (iResultCallBack != null) {\r\n                            iResultCallBack.onFailRequest(baseResult.errorInfo);\r\n                            iResultCallBack.onFail(baseResult.errorInfo);\r\n                            iResultCallBack.onFinal(baseResult);\r\n                        }\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        if (iDataListenerCurr.isFail(baseHttpParams, baseResult)) {\r\n            baseResult.success = false;\r\n            // 返回值提示错误\r\n            BaseErrorInfo baseErrorInfo = iDataListenerCurr.getFailErrorInfo();\r\n            if (baseErrorInfo == null) {\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error_default;\r\n                baseResult.errorInfo.errorMsg = \"请求失败,请稍后重试\";\r\n            } else {\r\n                baseResult.errorInfo = baseErrorInfo;\r\n            }\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, \"\".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onFailRequest(baseResult.errorInfo);\r\n                        iResultCallBack.onFail(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        } else if (iDataListenerCurr.isEmpty(baseHttpParams, baseResult)) {\r\n            baseResult.success = true;\r\n            baseResult.isEmpty = true;\r\n            // 返回值提示错误\r\n            BaseErrorInfo baseErrorInfo = iDataListenerCurr.getEmptyErrorInfo();\r\n            if (baseErrorInfo == null) {\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_none;\r\n                baseResult.errorInfo.errorMsg = \"未获取到数据\";\r\n            } else {\r\n                baseResult.errorInfo = baseErrorInfo;\r\n            }\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenEmpty) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowEmptyMessage) {\r\n                        iMessageManager.showEmptyMessages(contextStatic, \"\".equals(emptyMsg) ? baseResult.errorInfo.errorMsg : emptyMsg);\r\n                    }\r\n                    if (iResultCallBack != null) {\r\n                        iResultCallBack.onEmpty(baseResult.errorInfo);\r\n                        iResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /************************ 上传文件设置 ********************************/\r\n    // 是否同步上传 默认 是\r\n    public boolean isSysn  = true;\r\n    public BaseHttpUtils initUploadSysn(boolean isSysn){\r\n        this.isSysn = isSysn;\r\n        return this;\r\n    }\r\n    // 最大异步上传个数（最大是3）\r\n    public int maxUploadCount = 3;\r\n    public BaseHttpUtils initMaxUploadCount(int maxUploadCount){\r\n        this.maxUploadCount = maxUploadCount;\r\n        return this;\r\n    }\r\n\r\n    public List<File> listFiles = new ArrayList<>();\r\n    public List<String> listFilesKey = new ArrayList<>();\r\n\r\n    public BaseHttpUtils initFilePath(String filePath) {\r\n        File file = new File(filePath);\r\n        return initFile(file);\r\n    }\r\n\r\n    public BaseHttpUtils initFile(File file) {\r\n        if (file != null) {\r\n            listFiles.add(file);\r\n        }\r\n        return this;\r\n    }\r\n    public BaseHttpUtils initFilesList(List<File> fileList) {\r\n        this.listFiles.addAll(fileList);\r\n        return this;\r\n    }\r\n\r\n    public BaseHttpUtils initFileList(String... filePathList) {\r\n        for (String s : filePathList) {\r\n            initFilePath(s);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    public BaseHttpUtils initFileList(List<String> filePathList) {\r\n        for (String s : filePathList) {\r\n            initFilePath(s);\r\n        }\r\n        return this;\r\n    }\r\n\r\n\r\n    public BaseHttpUtils initFileKeyList(String... filePathList) {\r\n        for (String s : filePathList) {\r\n            listFilesKey.add(s);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * key生成策略\r\n     * isChange = true   keyFirst0 keyFirst1 keyFirst2 keyFirst3...\r\n     * isChange = false   keyFirst keyFirst keyFirst keyFirst...\r\n     *\r\n     * @param keyFirst\r\n     * @param isChange\r\n     * @return\r\n     */\r\n    String keyFirst = \"file\";\r\n    boolean isKeyChange = false;\r\n    // key自动生成。\r\n    boolean isKeyAuto = false;\r\n\r\n    public BaseHttpUtils initFileKey(String keyFirst, boolean isKeyChange) {\r\n        isKeyAuto = true;\r\n        this.keyFirst = keyFirst;\r\n        this.isKeyChange = isKeyChange;\r\n        return this;\r\n    }\r\n\r\n    // 上传完成后需要不需要删除文件\r\n    public BaseHttpUtils initFileDelete(boolean delete) {\r\n        baseHttpParams.isDelete = delete;\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * 文件上传请求回调\r\n     */\r\n    IHttpFileResultCallBack iHttpFileResultCallBack;\r\n\r\n    public BaseHttpUtils initHttpFileResultCallBack(IHttpFileResultCallBack iHttpFileResultCallBack) {\r\n        this.iHttpFileResultCallBack = iHttpFileResultCallBack;\r\n        return this;\r\n    }\r\n\r\n    public void upload() {\r\n        if (Looper.myLooper() == Looper.getMainLooper()) {\r\n            BaseThreadPoolUtil.execute(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    uploads();\r\n                }\r\n            });\r\n        } else {\r\n            uploads();\r\n        }\r\n    }\r\n\r\n    private void uploads() { // log开关设置\r\n        baseHttpParams.openLog = checkLog();\r\n        settingMessageManager();\r\n\r\n        if (\"\".equals(baseHttpParams.url) || null == baseHttpParams.url) {\r\n            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \":错误描述_ url不能为空\");\r\n            }\r\n            deleteFile();\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    baseResult.errorInfo.errorMsg = \"url不能为空\";\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(TAG, baseHttpParams.tags + \": 开始上传文件\");\r\n            Log.e(TAG, baseHttpParams.tags + \": url = \" + baseHttpParams.url);\r\n            Log.e(TAG, baseHttpParams.tags + \": 上传文件个数:\" + listFiles.size());\r\n        }\r\n        if (!settingFileServiceAndDataListener()) {\r\n            deleteFile();\r\n            return;\r\n        }\r\n        if (!checkFiles()) {\r\n            deleteFile();\r\n            return;\r\n        }\r\n        if(isSysn || listFiles.size() == 1){\r\n            // 同步\r\n            if (!callFileHttpRequest()) {\r\n                deleteFile();\r\n                return;\r\n            }\r\n            if (!callFileDataParse()) {\r\n                deleteFile();\r\n                return;\r\n            }\r\n        }else{\r\n            boolean flag = false;\r\n//            startUpload();\r\n        }\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(BaseHttpConfig.TAG, tags + \": 文件上传成功\");\r\n        }\r\n        deleteFile();\r\n        mHandler.post(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                if (isDialogDismiss && isDialogDismissWhenSuccess) {\r\n                    dismissDialog();\r\n                }\r\n                if (iMessageManager != null && isShowMessage && isShowSuccessMessage) {\r\n                    iMessageManager.showMessages(contextStatic, \"\".equals(successMsg) ? baseResult.errorInfo.errorMsg : successMsg);\r\n                }\r\n                if (iHttpFileResultCallBack != null) {\r\n                    iHttpFileResultCallBack.onSuccess(baseResult);\r\n                    iHttpFileResultCallBack.onFinal(baseResult);\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    // 根据传入的值 初始化 IFileService 和 IDataListener\r\n    private boolean settingFileServiceAndDataListener() {\r\n        /******************** 发送前检查 ***********************/\r\n        baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n        try {\r\n            // 获取当前的 数据请求工具类\r\n            iFileServiceCurr = (iFileServiceCurr == null) ? (IFileService) (iFileServiceStatic == null ? null : iFileServiceStatic.newInstance()) : iFileServiceCurr;\r\n            // 获取当前的 数据解析工具类\r\n            iFileDataListenerCurr = iFileDataListenerCurr == null ? (IDataListener) (iFileDataStatic == null ? null : iFileDataStatic.newInstance()) : iFileDataListenerCurr;\r\n        } catch (IllegalAccessException e) {\r\n            e.printStackTrace();\r\n        } catch (InstantiationException e) {\r\n            e.printStackTrace();\r\n        }\r\n        // 检查调用方式是否正确\r\n        if ((iFileServiceCurr == null || iFileDataListenerCurr == null)) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \": 请先初始化设置好文件处理工具和解析工具类\");\r\n            }\r\n            baseResult.errorInfo.errorMsg = \"请先初始化设置好文件处理工具和解析工具类\";\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        } else {\r\n//            if (iHttpServiceFilter != null && iHttpServiceCurr != null) {\r\n//                iHttpServiceFilter.filterIHttpService(iHttpServiceCurr);\r\n//            }\r\n//            if (iDataListenerFilter != null && iDataListenerCurr != null) {\r\n//                iDataListenerFilter.filterIDataListener(iDataListenerCurr);\r\n//            }\r\n//            // filterIHttpService 和 filterIDataListener 以后 再做一次非空判断\r\n//            if ((iHttpServiceCurr == null || iDataListenerCurr == null)) {\r\n//                if (baseHttpParams.openLog) {\r\n//                    Log.e(BaseHttpConfig.TAG, tags + \": filterIHttpService 和 filterIDataListener 方法不能设置参数为null\");\r\n//                }\r\n//                baseResult.errorInfo.errorMsg = \"filterIHttpService 和 filterIDataListener 方法不能设置参数为null\";\r\n//                mHandler.post(new Runnable() {\r\n//                    @Override\r\n//                    public void run() {\r\n//                        if (isDialogDismiss && isDialogDismissWhenFail) {\r\n//                            dismissDialog();\r\n//                        }\r\n//                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n//                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n//                        }\r\n//                        if (iHttpFileResultCallBack != null) {\r\n//                            iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n//                            iHttpFileResultCallBack.onFinal(baseResult);\r\n//                        }\r\n//                    }\r\n//                });\r\n//                return false;\r\n//            }\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // 检查文件是否可用\r\n    private boolean checkFiles() {\r\n        baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_File_error;\r\n        if (listFiles.isEmpty()) {\r\n            baseResult.errorInfo.errorMsg = \"上传文件为空\";\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, \"\".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        } else {\r\n            if (!isKeyAuto) {\r\n                if (listFiles.size() != listFilesKey.size()) {\r\n                    baseResult.errorInfo.errorMsg = \"未设置上传文件的key值\";\r\n                    if (baseHttpParams.openLog) {\r\n                        Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    mHandler.post(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                                dismissDialog();\r\n                            }\r\n                            if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                                iMessageManager.showErrorMessages(contextStatic, \"\".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);\r\n                            }\r\n                            if (iHttpFileResultCallBack != null) {\r\n                                iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                                iHttpFileResultCallBack.onFinal(baseResult);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    return false;\r\n                }\r\n            } else {\r\n                listFilesKey.clear();\r\n            }\r\n            boolean flag = true;\r\n            for (int i = 0; i < listFiles.size(); i++) {\r\n                File file = listFiles.get(i);\r\n                if (!file.exists()) {\r\n                    baseResult.errorInfo.errorMsg = \"第\" + (i + 1) + \"个文件不存在: 路径为:\" + file.getPath();\r\n                    if (baseHttpParams.openLog) {\r\n                        Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    mHandler.post(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                                dismissDialog();\r\n                            }\r\n                            if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                                iMessageManager.showErrorMessages(contextStatic, \"\".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);\r\n                            }\r\n                            if (iHttpFileResultCallBack != null) {\r\n                                iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                                iHttpFileResultCallBack.onFinal(baseResult);\r\n                            }\r\n                        }\r\n                    });\r\n                    flag = false;\r\n                    break;\r\n                }\r\n                if (isKeyAuto) {\r\n                    listFilesKey.add(isKeyChange ? (keyFirst + i) : keyFirst);\r\n                }\r\n                if (baseHttpParams.openLog) {\r\n                    Log.e(TAG, baseHttpParams.tags + \": 第\" + (i + 1) + \"个文件: 路径为:\" + file.getPath() + \", key = \" + listFilesKey.get(i));\r\n                }\r\n            }\r\n            if (flag) {\r\n                baseHttpParams.fileList = listFiles;\r\n                baseHttpParams.fileKeys = listFilesKey;\r\n            }\r\n            return flag;\r\n        }\r\n    }\r\n\r\n    // 删除文件\r\n    private void deleteFile(){\r\n        if(baseHttpParams.isDelete && !listFiles.isEmpty()){\r\n            for (File listFile : listFiles) {\r\n                if(listFile.exists()){\r\n                    listFile.delete();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // 文件上传\r\n    private boolean callFileHttpRequest() {\r\n        BaseRequestResult baseRequestResult = iFileServiceCurr.uploadFile(baseHttpParams, new IFileUploadListener() {\r\n            @Override\r\n            public void onFileProgress(final int position,final File file,final long curlenth,final long total) {\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (iHttpFileResultCallBack != null) {\r\n                            iHttpFileResultCallBack.onFileProgress(position,file,curlenth,total);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        if (baseRequestResult == null || !baseRequestResult.checkResult()) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \":错误描述_ IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定\");\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    BaseErrorInfo baseErrorInfos = new BaseErrorInfo();\r\n                    baseErrorInfos.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n                    baseErrorInfos.errorMsg = \"IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定\";\r\n                    baseResult.errorInfo = baseErrorInfos;\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseErrorInfos);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.baseRequestResult = baseRequestResult;\r\n        if (!baseRequestResult.isSuccess) {\r\n            baseResult.success = false;\r\n            baseResult.errorInfo = baseRequestResult.errorInfo;\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.baseRequestResult.isSuccess = true;\r\n        return true;\r\n    }\r\n\r\n    // 文件上传后的数据解析\r\n    private boolean callFileDataParse() {\r\n        /******************** 解析返回值 ***********************/\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(BaseHttpConfig.TAG, tags + \": 开始解析返回值...\");\r\n        }\r\n        byte[] bytes = baseResult.baseRequestResult.bytes;\r\n\r\n        baseResult.result = new BaseResult.Result();\r\n        baseResult.result.resultAll = new String(bytes);\r\n        baseResult.result.resultData = baseResult.result.resultAll;\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(TAG, baseHttpParams.tags + \":返回值的结果是: \" + baseResult.result.resultAll);\r\n        }\r\n        String resultData = \"\";\r\n        try {\r\n            resultData = iFileDataListenerCurr.parseResult(baseHttpParams, bytes);\r\n        } catch (Exception e) {\r\n            resultData = \"\";\r\n\r\n            baseResult.success = false;\r\n            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;\r\n            baseResult.errorInfo.exception = e;\r\n            baseResult.errorInfo.errorMsg = \"IDataListener parseResult方法出现异常,异常信息为:\" + e;\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ IDataListener parseResult方法出现异常,异常信息为:\" + e);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.result.resultData = resultData;\r\n\r\n        if (resultData != null && !\"\".equals(resultData) && !\"null\".equals(resultData)) {\r\n            try {\r\n                switch (baseHttpParams.dataParseType) {\r\n                    case List:\r\n                        baseResult.result.setResult_list(iFileDataListenerCurr.parseList(baseHttpParams, resultData));\r\n                        break;\r\n                    case Object:\r\n                        baseResult.result.setResult_object(iFileDataListenerCurr.parseObject(baseHttpParams, resultData));\r\n                        break;\r\n                    case Combination:\r\n                        baseResult.result.setResult_list_combination(iFileDataListenerCurr.parseCombination(baseHttpParams, resultData));\r\n                        break;\r\n                    case String:\r\n                        baseResult.result.setResult_str(iFileDataListenerCurr.parseDefault(baseHttpParams, resultData));\r\n                    default:\r\n                        break;\r\n                }\r\n            } catch (Exception e) {\r\n                baseResult.success = false;\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;\r\n                baseResult.errorInfo.exception = e;\r\n                baseResult.errorInfo.errorMsg = \"IDataListener 返回值解析异常,异常信息为:\" + e;\r\n\r\n                if (baseHttpParams.openLog) {\r\n                    Log.e(TAG, baseHttpParams.tags + \":错误描述_ IDataListener 返回值解析异常,异常信息为:\" + e);\r\n                }\r\n                // 请求结果出现异常\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                            dismissDialog();\r\n                        }\r\n                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                        }\r\n                        if (iHttpFileResultCallBack != null) {\r\n                            iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                            iHttpFileResultCallBack.onFinal(baseResult);\r\n                        }\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        if (iFileDataListenerCurr.isFail(baseHttpParams, baseResult)) {\r\n            baseResult.success = false;\r\n            // 返回值提示错误\r\n            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getFailErrorInfo();\r\n            if (baseErrorInfo == null) {\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error_default;\r\n                baseResult.errorInfo.errorMsg = \"请求失败,请稍后重试\";\r\n            } else {\r\n                baseResult.errorInfo = baseErrorInfo;\r\n            }\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, \"\".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        } else if (iFileDataListenerCurr.isEmpty(baseHttpParams, baseResult)) {\r\n            baseResult.success = true;\r\n            baseResult.isEmpty = true;\r\n            // 返回值提示错误\r\n            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getEmptyErrorInfo();\r\n            if (baseErrorInfo == null) {\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_none;\r\n                baseResult.errorInfo.errorMsg = \"未获取到数据\";\r\n            } else {\r\n                baseResult.errorInfo = baseErrorInfo;\r\n            }\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenEmpty) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowEmptyMessage) {\r\n                        iMessageManager.showEmptyMessages(contextStatic, \"\".equals(emptyMsg) ? baseResult.errorInfo.errorMsg : emptyMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onEmpty(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // 已经完成上传的个数\r\n    private int uploadedCount = 0;\r\n    private void asynUpload(){\r\n        if(listFiles.size() <= maxUploadCount){\r\n            // 需要上传的文件没有达到最大上传数\r\n            for (int i = 0; i < listFiles.size(); i++) {\r\n                BaseThreadPoolUtil.execute(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        isAsynUploadFinish();\r\n                    }\r\n                });\r\n            }\r\n        }else{\r\n            // 最开始启动 maxUploadCount个线程用于上传\r\n            if(uploadedCount == 0){\r\n                // 异步\r\n                for (int i = 0; i < maxUploadCount; i++) {\r\n                    BaseThreadPoolUtil.execute(new Runnable() {\r\n                        @Override\r\n                        public void run() {\r\n                            isAsynUploadFinish();\r\n                        }\r\n                    });\r\n                }\r\n            }else{\r\n                BaseThreadPoolUtil.execute(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        isAsynUploadFinish();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // 是否全部上传完成\r\n    private boolean isAsynUploadFinish(){\r\n        uploadedCount+=1;\r\n        if(uploadedCount == listFiles.size()){\r\n            // 全部完成\r\n            return true;\r\n        }\r\n        // 上传其他的\r\n        asynUpload();\r\n        return false;\r\n    }\r\n    // 异步上传\r\n    private boolean callFileByAsyn(){\r\n        BaseRequestResult baseRequestResult = iFileServiceCurr.uploadFile(baseHttpParams, new IFileUploadListener() {\r\n            @Override\r\n            public void onFileProgress(final int position,final File file,final long curlenth,final long total) {\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (iHttpFileResultCallBack != null) {\r\n                            iHttpFileResultCallBack.onFileProgress(position,file,curlenth,total);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        if (baseRequestResult == null || !baseRequestResult.checkResult()) {\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, tags + \":错误描述_ IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定\");\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    BaseErrorInfo baseErrorInfos = new BaseErrorInfo();\r\n                    baseErrorInfos.errorCode = BaseHttpConfig.ErrorCode.Error_Use;\r\n                    baseErrorInfos.errorMsg = \"IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定\";\r\n                    baseResult.errorInfo = baseErrorInfos;\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseErrorInfos);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.baseRequestResult = baseRequestResult;\r\n        if (!baseRequestResult.isSuccess) {\r\n            baseResult.success = false;\r\n            baseResult.errorInfo = baseRequestResult.errorInfo;\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(BaseHttpConfig.TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.baseRequestResult.isSuccess = true;\r\n\r\n        /******************** 解析返回值 ***********************/\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(BaseHttpConfig.TAG, tags + \": 开始解析返回值...\");\r\n        }\r\n        byte[] bytes = baseResult.baseRequestResult.bytes;\r\n\r\n        baseResult.result = new BaseResult.Result();\r\n        baseResult.result.resultAll = new String(bytes);\r\n        baseResult.result.resultData = baseResult.result.resultAll;\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(TAG, baseHttpParams.tags + \":返回值的结果是: \" + baseResult.result.resultAll);\r\n        }\r\n        String resultData = \"\";\r\n        try {\r\n            resultData = iFileDataListenerCurr.parseResult(baseHttpParams, bytes);\r\n        } catch (Exception e) {\r\n            resultData = \"\";\r\n\r\n            baseResult.success = false;\r\n            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;\r\n            baseResult.errorInfo.exception = e;\r\n            baseResult.errorInfo.errorMsg = \"IDataListener parseResult方法出现异常,异常信息为:\" + e;\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ IDataListener parseResult方法出现异常,异常信息为:\" + e);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        baseResult.result.resultData = resultData;\r\n\r\n        if (resultData != null && !\"\".equals(resultData) && !\"null\".equals(resultData)) {\r\n            try {\r\n                switch (baseHttpParams.dataParseType) {\r\n                    case List:\r\n                        baseResult.result.setResult_list(iFileDataListenerCurr.parseList(baseHttpParams, resultData));\r\n                        break;\r\n                    case Object:\r\n                        baseResult.result.setResult_object(iFileDataListenerCurr.parseObject(baseHttpParams, resultData));\r\n                        break;\r\n                    case Combination:\r\n                        baseResult.result.setResult_list_combination(iFileDataListenerCurr.parseCombination(baseHttpParams, resultData));\r\n                        break;\r\n                    case String:\r\n                        baseResult.result.setResult_str(iFileDataListenerCurr.parseDefault(baseHttpParams, resultData));\r\n                    default:\r\n                        break;\r\n                }\r\n            } catch (Exception e) {\r\n                baseResult.success = false;\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;\r\n                baseResult.errorInfo.exception = e;\r\n                baseResult.errorInfo.errorMsg = \"IDataListener 返回值解析异常,异常信息为:\" + e;\r\n\r\n                if (baseHttpParams.openLog) {\r\n                    Log.e(TAG, baseHttpParams.tags + \":错误描述_ IDataListener 返回值解析异常,异常信息为:\" + e);\r\n                }\r\n                // 请求结果出现异常\r\n                mHandler.post(new Runnable() {\r\n                    @Override\r\n                    public void run() {\r\n                        if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                            dismissDialog();\r\n                        }\r\n                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);\r\n                        }\r\n                        if (iHttpFileResultCallBack != null) {\r\n                            iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                            iHttpFileResultCallBack.onFinal(baseResult);\r\n                        }\r\n                    }\r\n                });\r\n                return false;\r\n            }\r\n        }\r\n        if (iFileDataListenerCurr.isFail(baseHttpParams, baseResult)) {\r\n            baseResult.success = false;\r\n            // 返回值提示错误\r\n            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getFailErrorInfo();\r\n            if (baseErrorInfo == null) {\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error_default;\r\n                baseResult.errorInfo.errorMsg = \"请求失败,请稍后重试\";\r\n            } else {\r\n                baseResult.errorInfo = baseErrorInfo;\r\n            }\r\n\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenFail) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {\r\n                        iMessageManager.showErrorMessages(contextStatic, \"\".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        } else if (iFileDataListenerCurr.isEmpty(baseHttpParams, baseResult)) {\r\n            baseResult.success = true;\r\n            baseResult.isEmpty = true;\r\n            // 返回值提示错误\r\n            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getEmptyErrorInfo();\r\n            if (baseErrorInfo == null) {\r\n                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_none;\r\n                baseResult.errorInfo.errorMsg = \"未获取到数据\";\r\n            } else {\r\n                baseResult.errorInfo = baseErrorInfo;\r\n            }\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(TAG, baseHttpParams.tags + \":错误描述_ \" + baseResult.errorInfo.errorMsg);\r\n            }\r\n            // 请求结果出现异常\r\n            mHandler.post(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    if (isDialogDismiss && isDialogDismissWhenEmpty) {\r\n                        dismissDialog();\r\n                    }\r\n                    if (iMessageManager != null && isShowMessage && isShowEmptyMessage) {\r\n                        iMessageManager.showEmptyMessages(contextStatic, \"\".equals(emptyMsg) ? baseResult.errorInfo.errorMsg : emptyMsg);\r\n                    }\r\n                    if (iHttpFileResultCallBack != null) {\r\n                        iHttpFileResultCallBack.onEmpty(baseResult.errorInfo);\r\n                        iHttpFileResultCallBack.onFinal(baseResult);\r\n                    }\r\n                }\r\n            });\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    class MyRunnable implements Runnable {\r\n        int position;\r\n        public MyRunnable(int position){\r\n            this.position = position;\r\n        }\r\n        @Override\r\n        public void run() {\r\n            System.out.println(position+\":当前执行第\"+(position+1)+\"个\");\r\n            try {\r\n                Thread.sleep(500);\r\n                uploaded(position);\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    static int listFileSize = 9;\r\n    static int maxSize = 3;\r\n    static int startedCount;\r\n    static int uploadSuccessCount = 0;\r\n    public void startUpload(){\r\n        // 每次需要处理的个数\r\n        int uploadCount = Math.min(maxSize, listFileSize);\r\n\r\n        startedCount = uploadCount;\r\n\r\n        for(int i = 0 ; i < uploadCount; i++){\r\n            System.out.println(i+\":开始执行第\"+(i+1)+\"个\");\r\n            new Thread(new MyRunnable(i)).start();\r\n        }\r\n    }\r\n    public synchronized void uploaded(int position) {\r\n        uploadSuccessCount+=1;\r\n        System.out.println(position+\":执行第\"+(position+1)+\"个成功,一共成功了\"+uploadSuccessCount+\"个\");\r\n        if(uploadSuccessCount == listFileSize){\r\n            System.out.println(\"上传成功\");\r\n        }else if(startedCount < listFileSize){\r\n            test2();\r\n        }\r\n    }\r\n    public synchronized void test2(){\r\n        startedCount+=1;\r\n        if(startedCount == listFileSize){\r\n            System.out.println(\"全部执行完毕\");\r\n        }\r\n        System.out.println(startedCount+\":开始执行第\"+(startedCount)+\"个\");\r\n        new Thread(new MyRunnable(startedCount-1)).start();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/BaseHttpUtils.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/BaseHttpUtils.java	(date 1608782316243)
@@ -1,526 +1,324 @@
 package com.xhttp.lib;
 
 import android.app.Dialog;
-import android.content.Context;
 import android.os.Handler;
 import android.os.Looper;
-import android.util.Log;
-
-import com.xhttp.lib.config.BaseErrorInfo;
+import android.util.Pair;
 import com.xhttp.lib.config.BaseHttpConfig;
-import com.xhttp.lib.config.BaseHttpParams;
-import com.xhttp.lib.impl.data.DefaultDataListener;
-import com.xhttp.lib.impl.file.DefaultFileService;
-import com.xhttp.lib.impl.message.MessageManager;
-import com.xhttp.lib.impl.service.DefaultHttpService;
-import com.xhttp.lib.interfaces.callback.IFileUploadListener;
-import com.xhttp.lib.interfaces.callback.IHttpFileResultCallBack;
 import com.xhttp.lib.interfaces.callback.IHttpResultCallBack;
 import com.xhttp.lib.interfaces.data.IDataListener;
 import com.xhttp.lib.interfaces.data.IDataListenerFilter;
-import com.xhttp.lib.interfaces.file.IFileService;
 import com.xhttp.lib.interfaces.http.IHttpService;
 import com.xhttp.lib.interfaces.http.IHttpServiceFilter;
-import com.xhttp.lib.interfaces.message.IMessageManager;
-import com.xhttp.lib.interfaces.message.IMessageManagerFilter;
 import com.xhttp.lib.model.BaseRequestResult;
-import com.xhttp.lib.util.BaseThreadPoolUtil;
+import com.xhttp.lib.params.BaseHttpInitParams;
+import com.xhttp.lib.params.BaseHttpParams;
+import com.xhttp.lib.rquest.BaseHttpRequestUtils;
+import com.xhttp.lib.util.BaseHttpCheckUtils;
+import com.xhttp.lib.util.BaseLogUtils;
+import com.xhttp.lib.util.BaseObjectUtils;
+import com.xhttp.lib.util.BaseThreadPoolUtils;
+import org.json.JSONException;
+import org.json.JSONObject;
 
-import java.io.File;
-import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
-import static com.xhttp.lib.config.BaseHttpConfig.TAG;
-
 /**
- * Created by lixingxing on 2019/3/26.
+ * 网络工具类
+ *
+ * @author Lixingxing
  */
-public final class BaseHttpUtils {
+public class BaseHttpUtils {
+    private static Handler mHandler;
+
+    static {
+        if (Looper.myLooper() == Looper.getMainLooper()) {
+            mHandler = new Handler(Looper.getMainLooper());
+        } else {
+            mHandler = new Handler();
+        }
+    }
+
     // 唯一标识
     private String tags = "";
-    private static Context contextStatic;
-    // 是否打开Log日志
-    private static boolean openLogStatic = true;
+    // 全局参数
+    private static BaseHttpInitParams mBaseHttpInitParams;
+    // 请求参数
+    private BaseHttpParams mBaseHttpParams;
+    // 返回值
+    private BaseResult mBaseResult;
+
+    private Dialog dialog;
+
+
+    /**
+     * 获取工具类实例(新实例)
+     */
+    public static BaseHttpUtils create() {
+        return new BaseHttpUtils();
+    }
 
-    public static void init(Context context, boolean openLogs) {
-        contextStatic = context;
-        openLogStatic = openLogs;
+    public static BaseHttpUtils create(Dialog dialog) {
+        BaseHttpUtils baseHttpUtils = new BaseHttpUtils();
+        baseHttpUtils.dialog = dialog;
+        return baseHttpUtils;
     }
 
-    private Boolean openLog = null;
+    private void createTag() {
+        tags = UUID.randomUUID().toString();
+    }
 
+    private BaseHttpUtils() {
+        BaseLogUtils.logE("BaseHttpUtils",true,
+                "此次请求开始0");
+        BaseHttpCheckUtils.checkInit(mBaseHttpInitParams);
+        createTag();
+        mBaseHttpParams = new BaseHttpParams(mBaseHttpInitParams);
+        mBaseHttpParams.tags = BaseHttpConfig.TAGS + "_"+ tags;
+
+        BaseLogUtils.logE(mBaseHttpParams.tags,mBaseHttpParams.openLog,
+                "此次请求开始1");
+    }
+
+    /*********************************** 初始化参数 ************************************/
+    /**
+     * 初始化方法
+     * 建议放在 Application中
+     */
+    public static void init(BaseHttpInitParams baseHttpInitParams) {
+        BaseHttpCheckUtils.checkInit(baseHttpInitParams);
+        mBaseHttpInitParams = baseHttpInitParams;
+    }
+
+
+    /*********************************** 设置控制参数 **********************************/
+    /**
+     * 设置log开关
+     *
+     * @param openLog
+     * @return
+     */
     public BaseHttpUtils initOpenLog(boolean openLog) {
-        this.openLog = openLog;
+        mBaseHttpParams.openLog = openLog;
         return this;
     }
 
-    // 检查Log开关
-    public boolean checkLog() {
-        if (openLog == null) {
-            return openLogStatic;
-        }
-        return openLog;
+    /**
+     * 设置log标签
+     * @param tag
+     * @return
+     */
+    public BaseHttpUtils initTags(String tag) {
+        mBaseHttpParams.tags = tag;
+        return this;
     }
 
-    // 发送请求封装类
-    private BaseHttpParams baseHttpParams;
-    // 返回值封装类
-    private BaseResult baseResult;
 
-    public BaseHttpUtils() {
-        this(new BaseHttpParams());
-    }
+    public BaseHttpUtils initDissMissDialog(boolean dissmissDialog){
 
-    public BaseHttpUtils(Dialog dialog) {
-        this(new BaseHttpParams());
-        this.dialog = dialog;
     }
 
-    private BaseHttpUtils(BaseHttpParams baseHttpParams) {
-        if (contextStatic == null) {
-            throw new RuntimeException("请在application中调用init(Context context,boolean openLogs)方法，并且context!=null");
-        }
-        this.baseHttpParams = baseHttpParams;
-        this.baseResult = new BaseResult();
-
-        tags = UUID.randomUUID().toString();
-//        tags = System.currentTimeMillis() + "";
-        this.baseHttpParams.tags = tags;
-        if (iHttpServiceStatic == null) {
-            // 默认
-            iHttpServiceStatic = DefaultHttpService.class;
-        }
-        if (iDataListenerStatic == null) {
-            // 默认
-            iDataListenerStatic = DefaultDataListener.class;
-        }
-        if (iMessageManagerStatic == null) {
-            // 默认
-            iMessageManagerStatic = MessageManager.class;
-        }
-        if (iFileServiceStatic == null) {
-            // 默认
-            iFileServiceStatic = DefaultFileService.class;
-        }
-        if(iFileDataStatic == null){
-            // 默认
-            iFileDataStatic = DefaultFileService.class;
-        }
-    }
-
-    /************************ 请求参数 ********************************/
+    /*********************************** 设置请求和解析工具类 **************************/
     /**
-     * 全局的 请求工具类 iHttpServiceStatic 和 数据解析类 iDataListenerStatic
-     * 会被 initIHttpService 和 initIDataListener中设置的值覆盖掉
+     * 针对 本次请求的 请求工具类 IHttpService 和 数据解析类 IDataListener
+     * 会覆盖全局的 请求工具类 IHttpService 和 数据解析类 IDataListener
      */
-    public static Class iHttpServiceStatic;
-    public static Class iDataListenerStatic;
-    public static Class iFileServiceStatic;
-    public static Class iFileDataStatic;
+    // 请求工具类处理
+    private IHttpService mHttpService;
+    private IDataListener mDataListener;
 
-    private IHttpService iHttpServiceCurr;
-    private IDataListener iDataListenerCurr;
-    private IFileService iFileServiceCurr;
-    private IDataListener iFileDataListenerCurr;
-
-    // 初始化设置 全局的 请求工具类 和 数据解析类
-    public static void init(Class iHttpServiceStatics, Class iDataListenerStatics) {
-        if (iHttpServiceStatics != null && IHttpService.class.isAssignableFrom(iHttpServiceStatics)) {
-            iHttpServiceStatic = iHttpServiceStatics;
-        } else if (iHttpServiceStatics != null) {
-            throw new RuntimeException("初始化请求工具类和数据解析类时类型错误");
-        }
-        if (iDataListenerStatics != null && IDataListener.class.isAssignableFrom(iDataListenerStatics)) {
-            iDataListenerStatic = iDataListenerStatics;
-        } else if (iDataListenerStatics != null) {
-            throw new RuntimeException("初始化请求工具类和数据解析类时类型错误");
-        }
-    }
-
-
-    // 初始化设置 全局的 请求工具类 和 数据解析类(如果没有调用，则会使用默认的)
-    public static void initFile(Class iHttpServiceStatics, Class iDataListenerStatics) {
-        if (iHttpServiceStatics != null && IFileService.class.isAssignableFrom(iHttpServiceStatics)) {
-            iFileServiceStatic = iHttpServiceStatics;
-        } else if (iHttpServiceStatics != null) {
-            throw new RuntimeException("初始化请求工具类和数据解析类时类型错误");
-        }
-        if (iDataListenerStatics != null && IDataListener.class.isAssignableFrom(iDataListenerStatics)) {
-            iFileDataStatic = iDataListenerStatics;
-        } else if (iDataListenerStatics != null) {
-            throw new RuntimeException("初始化请求工具类和数据解析类时类型错误");
-        }
-    }
-
-    /**
-     * 针对 本次请求的 请求工具类 iHttpService 和 数据解析类 iDataListener
-     * 会覆盖全局的 请求工具类 iHttpServiceStatic 和 数据解析类 iDataListenerStatic
-     */
-    // 网络请求工具类处理
-    private IHttpServiceFilter iHttpServiceFilter;
-    // 数据解析工具类处理
-    private IDataListenerFilter iDataListenerFilter;
+    // 解析工具类处理
+    private IHttpServiceFilter mHttpServiceFilter;
+    private IDataListenerFilter mDataListenerFilter;
 
     // 设置 网络请求工具类
     public BaseHttpUtils initIHttpService(IHttpService iHttpService) {
-        this.iHttpServiceCurr = iHttpService;
+        this.mHttpService = iHttpService;
         return this;
     }
 
     // 对设置好的 IHttpService 进行处理
     public BaseHttpUtils initIHttpServiceFilter(IHttpServiceFilter iHttpServiceFilter) {
-        this.iHttpServiceFilter = iHttpServiceFilter;
+        this.mHttpServiceFilter = iHttpServiceFilter;
         return this;
     }
 
     // 设置 数据解析工具类
     public BaseHttpUtils initIDataListener(IDataListener iDataListener) {
-        this.iDataListenerCurr = iDataListener;
+        this.mDataListener = iDataListener;
         return this;
     }
 
     // 对设置好的  IDataListener 进行处理
     public BaseHttpUtils initIDataListenerFilter(IDataListenerFilter iDataListenerFilter) {
-        this.iDataListenerFilter = iDataListenerFilter;
+        this.mDataListenerFilter = iDataListenerFilter;
         return this;
     }
 
+
+    /*********************************** 设置参数 ************************************/
     /**
      * 设置请求路径 url
      *
      * @param url
      */
     public BaseHttpUtils initUrl(String url) {
-        baseHttpParams.url = url;
+        mBaseHttpParams.url = url;
         return this;
     }
 
-    // initParams 只针对 post请求,get请求不处理params
-
     /**
      * 设置请求参数1 params
      * initParams(key,value,key,value....)
+     * initParams 只针对 post请求,get请求不处理params
      *
      * @param params
      */
     public BaseHttpUtils initParams(Object... params) {
-        baseHttpParams.params = params;
+        mBaseHttpParams.paramsList.clear();
+        if(params.length > 1){
+            for (int i = 0; i < params.length; i+=2) {
+                mBaseHttpParams.paramsList.add(new Pair<String, Object>((String) params[i], params[i+1]));
+            }
+        }
         return this;
     }
 
     /**
      * 设置请求参数2 params
-     * key=value&key=value
-     *
-     * @param params
-     */
-    public BaseHttpUtils initParams(String params) {
-        baseHttpParams.params = params;
-        return this;
-    }
-
-    /**
-     * 设置请求参数 params
      * Map参数
      *
      * @param params
      */
-    public BaseHttpUtils initParams(Map params) {
-        baseHttpParams.params = params;
-        return this;
-    }
-
-    // 可以拓展
-//    public BaseHttpUtils initJsonParams(String json){}
-
-    /**
-     * 设置请求方式 RequestType   post  get ...
-     *
-     * @param type
-     */
-    public BaseHttpUtils initRequestType(BaseHttpConfig.RequestType type) {
-        baseHttpParams.request_type = type;
+    public BaseHttpUtils initMapParams(Map<String,Object> params) {
+        if(params != null){
+            mBaseHttpParams.paramsList.clear();
+            for (String s : params.keySet()) {
+                mBaseHttpParams.paramsList.add(new Pair<String, Object>((String) s, params.get(s)));
+            }
+        }
         return this;
     }
 
     /**
-     * 设置超时时间
+     * 设置请求参数3 params
+     * List<Pair>参数
      *
-     * @param timeOut
+     * @param params
      */
-    public BaseHttpUtils initConnectTimeOut(int timeOut) {
-        baseHttpParams.timeout_connect = timeOut;
+    public BaseHttpUtils initListParams(List<Pair<String,Object>> params) {
+        if(params != null){
+            mBaseHttpParams.paramsList.clear();
+            mBaseHttpParams.paramsList.addAll(params);
+        }
         return this;
     }
 
-    public BaseHttpUtils initReadTimeOut(int timeOut) {
-        baseHttpParams.timeout_read = timeOut;
+    /**
+     * 设置请求参数3 params
+     * List<Pair>参数
+     *
+     * @param params
+     */
+    public BaseHttpUtils initJsonParams(String params) {
+        if(params != null){
+            try {
+                JSONObject jsonObject = new JSONObject(params);
+                mBaseHttpParams.paramsList.clear();
+                Iterator<String> keys = jsonObject.keys();
+                while (keys.hasNext()){
+                    String key = keys.next();
+                    Object value = jsonObject.get(key);
+                    mBaseHttpParams.paramsList.add(new Pair(key,value));
+                }
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        }
         return this;
     }
 
-    public BaseHttpUtils initTimeOut(int timeOut) {
-        baseHttpParams.timeout_connect = timeOut;
-        baseHttpParams.timeout_read = timeOut;
+    /**
+     * 添加参数  注意 调用了这个方法以后,不可以再调用其他的initParams方法,不然此方法设置的参数将无效
+     *
+     * @param key
+     * @param value
+     * @return
+     */
+    public BaseHttpUtils addParams(String key, Object value) {
+        mBaseHttpParams.paramsList.add(new Pair<String, Object>(key, value));
         return this;
     }
 
-
-    /************************返回值********************************/
-
     /**
-     * 设置返回值 解析模式
+     * 设置 返回值解析类型
      *
      * @param dataParseType
+     * @return
      */
     public BaseHttpUtils initDataParseType(BaseHttpConfig.DataParseType dataParseType) {
-        baseHttpParams.dataParseType = dataParseType;
+        mBaseHttpParams.dataParseType = dataParseType;
         return this;
     }
 
     /**
-     * 设置返回值 解析类型
-     *
-     * @param tClass
+     * 请求提交类型
+     * @param requestType
+     * @return
      */
-    public BaseHttpUtils initClass(Class tClass) {
-        baseHttpParams.aClass = tClass;
+    public BaseHttpUtils initRequestType(BaseHttpConfig.RequestType requestType){
+        mBaseHttpParams.request_type = requestType;
         return this;
     }
 
-
-    /************************ 其他设置 ********************************/
-
     /**
-     * 请求回调
+     * 返回值编码类型
+     * @param request_contentType
+     * @return
      */
-    IHttpResultCallBack iResultCallBack;
-
-    public BaseHttpUtils initHttpResultCallBack(IHttpResultCallBack iResultCallBack) {
-        this.iResultCallBack = iResultCallBack;
+    public BaseHttpUtils initRequestDataType(BaseHttpConfig.RequestContentType request_contentType){
+        mBaseHttpParams.request_contentType = request_contentType;
         return this;
     }
 
-    /**
-     * 请求回调提示语句工具类
-     */
-    static Class iMessageManagerStatic;
-
-    public static void init(Class iMessageManagerStatics) {
-        if (iMessageManagerStatics != null && IMessageManager.class.isAssignableFrom(iMessageManagerStatics)) {
-            iMessageManagerStatic = iMessageManagerStatics;
-        } else if (iMessageManagerStatics != null) {
-            throw new RuntimeException("初始化提示语句工具类时类型错误");
-        }
-    }
-
-    IMessageManager iMessageManager;
-    IMessageManagerFilter iMessageManagerFilter;
 
-    public BaseHttpUtils initIMessageManager(IMessageManager iMessageManager) {
-        this.iMessageManager = iMessageManager;
-        return this;
-    }
-
-    public BaseHttpUtils initIMessageManagerFilter(IMessageManagerFilter iMessageManagerFilter) {
-        this.iMessageManagerFilter = iMessageManagerFilter;
-        return this;
-    }
-
+    /*********************************** 设置回调 ************************************/
+    private IHttpResultCallBack mHttpResultCallBack;
     /**
-     * 设置是否显示提示语句 默认显示
+     * 设置 回调
+     *
+     * @param mHttpResultCallBack
+     * @return
      */
-    boolean isShowMessage = true;
-
-    public BaseHttpUtils initShowMessage(boolean isShowMessage) {
-        this.isShowMessage = isShowMessage;
-        return this;
-    }
-
-    /**
-     * 设置是否显示错误时提示语句 默认显示
-     */
-    boolean isShowErrorMessage = true;
-
-    public BaseHttpUtils initShowErrorMessage(boolean isShowErrorMessage) {
-        this.isShowErrorMessage = isShowErrorMessage;
-        return this;
-    }
-
-    String errorMsg = "";
-
-    public BaseHttpUtils initErrorMsg(String errorMsg) {
-        this.errorMsg = errorMsg;
-        return this;
-    }
-
-    /**
-     * 设置是否显示空数据时提示语句 默认null 列表模式下不显示
-     * 如果列表模式下想设置显示 可调用此方法 initShowEmptyMessage(true)
-     */
-    Boolean isShowEmptyMessage = null;
-
-    public BaseHttpUtils initShowEmptyMessage(Boolean isShowEmptyMessage) {
-        this.isShowEmptyMessage = isShowEmptyMessage;
-        return this;
-    }
-
-    String emptyMsg = "";
-
-    public BaseHttpUtils initEmptyMsg(String emptyMsg) {
-        this.emptyMsg = emptyMsg;
-        return this;
-    }
-
-    /**
-     * 设置是否显示正确时提示语句 默认不显示
-     */
-    boolean isShowSuccessMessage = false;
-
-    public BaseHttpUtils initShowSuccessMessage(boolean isShowSuccessMessage) {
-        this.isShowSuccessMessage = isShowSuccessMessage;
-        return this;
-    }
-
-    String successMsg = "请求成功";
-
-    public BaseHttpUtils initSuccessMsg(String successMsg) {
-        this.successMsg = successMsg;
-        return this;
-    }
-
-    /**
-     * 设置加载提示框
-     *
-     * @param dialog
-     */
-    Dialog dialog;
-
-    public BaseHttpUtils initDialog(Dialog dialog) {
-        this.dialog = dialog;
-        return this;
-    }
-
-    /**
-     * 设置 dialog是否消失 默认最后必须消失
-     *
-     * @param isDialogDismiss
-     */
-    boolean isDialogDismiss = true;
-
-    public BaseHttpUtils initDialogDismiss(boolean isDialogDismiss) {
-        this.isDialogDismiss = isDialogDismiss;
-        return this;
-    }
-
-    /**
-     * 设置 dialog请求成功时是否消失 默认最后必须消失
-     *
-     * @param isDialogDismiss
-     */
-    boolean isDialogDismissWhenSuccess = true;
-
-    public BaseHttpUtils initDialogDismissWhenSuccess(boolean isDialogDismissWhenSuccess) {
-        this.isDialogDismissWhenSuccess = isDialogDismissWhenSuccess;
-        return this;
-    }
-
-    /**
-     * 设置 dialog请求结果是空数据是否消失 默认最后必须消失
-     *
-     * @param isDialogDismiss
-     */
-    boolean isDialogDismissWhenEmpty = true;
-
-    public BaseHttpUtils initDialogDismissWhenEmpty(boolean isDialogDismissWhenEmpty) {
-        this.isDialogDismissWhenEmpty = isDialogDismissWhenEmpty;
-        return this;
-    }
-
-    /**
-     * 设置 dialog请求失败时是否消失 默认最后必须消失
-     *
-     * @param isDialogDismiss
-     */
-    boolean isDialogDismissWhenFail = true;
-
-    public BaseHttpUtils initDialogDismissWhenFail(boolean isDialogDismissWhenFail) {
-        this.isDialogDismissWhenFail = isDialogDismissWhenFail;
-        return this;
-    }
-
-    public BaseHttpUtils dismissDialog() {
-        if (null != dialog && dialog.isShowing()) {
-            dialog.dismiss();
-        }
+    public BaseHttpUtils initHttpResultCallBack(IHttpResultCallBack mHttpResultCallBack) {
+        this.mHttpResultCallBack = mHttpResultCallBack;
         return this;
     }
 
 
+    /*********************************** 开始请求 ************************************/
     /**
-     * 发送请求
+     * 请求方法
      */
-    private final Handler mHandler = new Handler(Looper.getMainLooper());
-
-
-    // post
-    public void postList(Class clz) {
-        baseHttpParams.aClass = clz;
-        postList();
-    }
-
-    public void postList() {
-        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.List;
-        post();
-    }
-
-    public void postObject(Class clz) {
-        baseHttpParams.aClass = clz;
-        postObject();
-    }
-
-    public void postObject() {
-        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.Object;
-        post();
+    public void get() {
+        mBaseHttpParams.request_type = BaseHttpConfig.RequestType.GET;
+        request();
     }
 
     public void post() {
-        baseHttpParams.request_type = BaseHttpConfig.RequestType.POST;
+        mBaseHttpParams.request_type = BaseHttpConfig.RequestType.POST;
         request();
     }
 
-    // get
-    public void getList(Class clz) {
-        baseHttpParams.aClass = clz;
-        getList();
-    }
-
-    public void getList() {
-        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.List;
-        get();
-    }
-
-    public void getObject(Class clz) {
-        baseHttpParams.aClass = clz;
-        getObject();
-    }
-
-    public void getObject() {
-        baseHttpParams.dataParseType = BaseHttpConfig.DataParseType.Object;
-        get();
-    }
-
-    public void get() {
-        baseHttpParams.request_type = BaseHttpConfig.RequestType.GET;
-        request();
-    }
-
-
-    // 网络请求要在线程中进行
+    /**
+     * 请求方法
+     */
     public void request() {
         if (Looper.myLooper() == Looper.getMainLooper()) {
-            BaseThreadPoolUtil.execute(new Runnable() {
+            BaseThreadPoolUtils.execute(new Runnable() {
                 @Override
                 public void run() {
                     requests();
@@ -531,1360 +329,142 @@
         }
     }
 
-    // 请求方法
-    private void requests() {
+    public void requests() {
+        mBaseResult = new BaseResult();
         mHandler.post(new Runnable() {
             @Override
             public void run() {
-                if (iResultCallBack != null) {
-                    iResultCallBack.onBeforeRequest(baseHttpParams);
-                }
-            }
-        });
-        // log开关设置
-        baseHttpParams.openLog = checkLog();
-        // 设置空数据时提示语句是否显示, 如果调用过 initShowEmptyMessage方法,则该方法不调用
-        settingEmptyMessage();
-        // messageManager设置
-        settingMessageManager();
-        // 检查一些基本设置
-        if (!settingDefaultParams()) {
-            return;
-        }
-        if (!settingHttpServiceAndDataListener()) {
-            return;
-        }
-        if (!callHttpRequest()) {
-            return;
-        }
-        if (!callDataParse()) {
-            return;
-        }
-
-        if (baseHttpParams.openLog) {
-            Log.e(BaseHttpConfig.TAG, tags + ": 请求完成,返回成功");
-        }
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (isDialogDismiss && isDialogDismissWhenSuccess) {
-                    dismissDialog();
-                }
-                if (iMessageManager != null && isShowMessage && isShowSuccessMessage) {
-                    iMessageManager.showMessages(contextStatic, "".equals(successMsg) ? baseResult.errorInfo.errorMsg : successMsg);
-                }
-                if (iResultCallBack != null) {
-                    iResultCallBack.onSuccess(baseResult);
-                    iResultCallBack.onFinal(baseResult);
+                if (mHttpResultCallBack != null) {
+                    mHttpResultCallBack.onBeforeRequest(mBaseHttpParams);
                 }
             }
         });
-    }
-
-    // 设置空数据时提示语句是否显示, 如果调用过 initShowEmptyMessage方法,则该方法不调用
-    private void settingEmptyMessage() {
-        if (isShowEmptyMessage == null) {
-            // 默认模式 列表模式下不显示
-            if (baseHttpParams.dataParseType == BaseHttpConfig.DataParseType.List) {
-                isShowEmptyMessage = false;
-            } else {
-                isShowEmptyMessage = true;
-            }
-        }
-    }
-
-    // messageManager设置
-    private void settingMessageManager() {
+        /*
+         * 检查和初始化
+         */
         try {
-            iMessageManager = iMessageManager == null ? (IMessageManager) iMessageManagerStatic.newInstance() : iMessageManager;
-            if (iMessageManagerFilter != null && iMessageManager != null) {
-                iMessageManagerFilter.filterIMessageManager(iMessageManager);
+            // 1.检查请求参数是否设置正确
+            BaseHttpCheckUtils.checkRequest(mBaseHttpParams);
+
+            // 2.检查和初始化 请求工具类
+            if (mHttpService == null && mBaseHttpInitParams.mHttpService != null) {
+                mHttpService = BaseObjectUtils.clone(mBaseHttpInitParams.mHttpService);
+            }
+            // 3.检查和初始化 解析工具类
+            if (mDataListener == null && mBaseHttpInitParams.mDataListener != null) {
+                mDataListener = BaseObjectUtils.clone(mBaseHttpInitParams.mDataListener);
             }
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        } catch (InstantiationException e) {
+
+            // 4.检查和初始化 请求工具类 过滤器
+            if (mHttpServiceFilter == null && mBaseHttpInitParams.mHttpServiceFilter != null) {
+                mHttpServiceFilter = BaseObjectUtils.clone(mBaseHttpInitParams.mHttpServiceFilter);
+            }
+            // 4.1 过滤设置 请求工具类
+            if (mHttpServiceFilter != null && mHttpService != null) {
+                mHttpService = mHttpServiceFilter.filterIHttpService(mHttpService);
+            }
+
+            // 5.检查和初始化 解析工具类  过滤器
+            if (mDataListenerFilter == null && mBaseHttpInitParams.mDataListenerFilter != null) {
+                mDataListenerFilter = BaseObjectUtils.clone(mBaseHttpInitParams.mDataListenerFilter);
+            }
+            // 5.1 过滤设置 解析工具类
+            if (mDataListenerFilter != null && mDataListener != null) {
+                mDataListener = mDataListenerFilter.filterIDataListener(mDataListener);
+            }
+            BaseHttpCheckUtils.checkServiceAndDataparse(mHttpService, mDataListener);
+        } catch (Exception e) {
             e.printStackTrace();
-        }
-    }
-
-    private boolean settingDefaultParams() {
-        if (baseHttpParams.aClass == null && baseHttpParams.dataParseType != BaseHttpConfig.DataParseType.String) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ":错误描述_ 请设置好需要解析的对象类型");
-            }
-            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-            baseResult.errorInfo.errorMsg = "请设置好需要解析的对象类型";
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailUse(baseResult.errorInfo);
-                        iResultCallBack.onFail(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        return true;
-    }
-
-
-    // 根据传入的值 初始化 IHttpService 和 IDataListener
-    private boolean settingHttpServiceAndDataListener() {
-        /******************** 发送前检查 ***********************/
-        baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-        try {
-            // 获取当前的 数据请求工具类
-            iHttpServiceCurr = iHttpServiceCurr == null ? (IHttpService) (iHttpServiceStatic == null ? null : iHttpServiceStatic.newInstance()) : iHttpServiceCurr;
-            // 获取当前的 数据解析工具类
-            iDataListenerCurr = iDataListenerCurr == null ? (IDataListener) (iDataListenerStatic == null ? null : iDataListenerStatic.newInstance()) : iDataListenerCurr;
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        } catch (InstantiationException e) {
-            e.printStackTrace();
-        }
-        // 检查调用方式是否正确
-        if ((iHttpServiceCurr == null || iDataListenerCurr == null)) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ": 请先初始化设置好请求和解析工具类");
-            }
-            baseResult.errorInfo.errorMsg = "请先初始化设置好请求和解析工具类";
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailUse(baseResult.errorInfo);
-                        iResultCallBack.onFail(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        } else {
-            if (iHttpServiceFilter != null && iHttpServiceCurr != null) {
-                iHttpServiceFilter.filterIHttpService(iHttpServiceCurr);
-            }
-            if (iDataListenerFilter != null && iDataListenerCurr != null) {
-                iDataListenerFilter.filterIDataListener(iDataListenerCurr);
-            }
-            // filterIHttpService 和 filterIDataListener 以后 再做一次非空判断
-            if ((iHttpServiceCurr == null || iDataListenerCurr == null)) {
-                if (baseHttpParams.openLog) {
-                    Log.e(BaseHttpConfig.TAG, tags + ": filterIHttpService 和 filterIDataListener 方法不能设置参数为null");
-                }
-                baseResult.errorInfo.errorMsg = "filterIHttpService 和 filterIDataListener 方法不能设置参数为null";
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (isDialogDismiss && isDialogDismissWhenFail) {
-                            dismissDialog();
-                        }
-                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                        }
-                        if (iResultCallBack != null) {
-                            iResultCallBack.onFailUse(baseResult.errorInfo);
-                            iResultCallBack.onFail(baseResult.errorInfo);
-                            iResultCallBack.onFinal(baseResult);
-                        }
-                    }
-                });
-                return false;
-            }
-            return true;
-        }
-    }
-
-    // 发送请求
-    private boolean callHttpRequest() {
-        /******************** 发送请求 ***********************/
-        if (baseHttpParams.openLog) {
-            Log.e(BaseHttpConfig.TAG, tags + ": 开始发送网络请求...");
-        }
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (iResultCallBack != null) {
-                    iResultCallBack.onRequest(baseHttpParams);
-                }
-            }
-        });
-        if ("".equals(baseHttpParams.url) || null == baseHttpParams.url) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ":错误描述_ url不能为空");
-            }
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    baseResult.errorInfo.errorMsg = "url不能为空";
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailUse(baseResult.errorInfo);
-                        iResultCallBack.onFail(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        Object params = iHttpServiceCurr.parseParams(baseHttpParams);
-        if (params == null) {
-            params = "";
-        }
-        baseHttpParams.params = params;
-
-        final BaseRequestResult baseRequestResult = iHttpServiceCurr.request(baseHttpParams);
-        if (baseRequestResult == null || !baseRequestResult.checkResult()) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ":错误描述_ IHttpService的request方法中 返回值BaseRequestResult不符合规定");
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    BaseErrorInfo baseErrorInfos = new BaseErrorInfo();
-                    baseErrorInfos.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-                    baseErrorInfos.errorMsg = "IHttpService的request方法中 返回值BaseRequestResult不符合规定";
-                    baseResult.errorInfo = baseErrorInfos;
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailRequest(baseErrorInfos);
-                        iResultCallBack.onFail(baseErrorInfos);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.baseRequestResult = baseRequestResult;
-        if (!baseRequestResult.isSuccess) {
-            baseResult.success = false;
-            baseResult.errorInfo = baseRequestResult.errorInfo;
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailRequest(baseResult.errorInfo);
-                        iResultCallBack.onFail(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.baseRequestResult.isSuccess = true;
-        return true;
-    }
-
-    // 数据解析
-    private boolean callDataParse() {
-        /******************** 解析返回值 ***********************/
-        if (baseHttpParams.openLog) {
-            Log.e(BaseHttpConfig.TAG, tags + ": 开始解析返回值...");
-        }
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (iResultCallBack != null) {
-                    iResultCallBack.onBeforeDataParse(baseHttpParams, baseResult);
-                }
-            }
-        });
-        byte[] bytes = baseResult.baseRequestResult.bytes;
-
-        baseResult.result = new BaseResult.Result();
-        baseResult.result.resultAll = new String(bytes);
-        baseResult.result.resultData = baseResult.result.resultAll;
-        if (baseHttpParams.openLog) {
-            Log.e(TAG, baseHttpParams.tags + ":返回值的结果是: " + baseResult.result.resultAll);
-        }
-        String resultData = "";
-        try {
-            resultData = iDataListenerCurr.parseResult(baseHttpParams, bytes);
-        } catch (Exception e) {
-            resultData = "";
-
-            baseResult.success = false;
-            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;
-            baseResult.errorInfo.exception = e;
-            baseResult.errorInfo.errorMsg = "IDataListener parseResult方法出现异常,异常信息为:" + e;
-
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ IDataListener parseResult方法出现异常,异常信息为:" + e);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailRequest(baseResult.errorInfo);
-                        iResultCallBack.onFail(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.result.resultData = resultData;
-
-        if (resultData != null && !"".equals(resultData) && !"null".equals(resultData)) {
-            try {
-                switch (baseHttpParams.dataParseType) {
-                    case List:
-                        baseResult.result.setResult_list(iDataListenerCurr.parseList(baseHttpParams, resultData));
-                        break;
-                    case Object:
-                        baseResult.result.setResult_object(iDataListenerCurr.parseObject(baseHttpParams, resultData));
-                        break;
-                    case Combination:
-                        baseResult.result.setResult_list_combination(iDataListenerCurr.parseCombination(baseHttpParams, resultData));
-                        break;
-                    case String:
-                        baseResult.result.setResult_str(iDataListenerCurr.parseDefault(baseHttpParams, resultData));
-                    default:
-                        break;
-                }
-            } catch (Exception e) {
-                baseResult.success = false;
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;
-                baseResult.errorInfo.exception = e;
-                baseResult.errorInfo.errorMsg = "IDataListener 返回值解析异常,异常信息为:" + e;
-
-                if (baseHttpParams.openLog) {
-                    Log.e(TAG, baseHttpParams.tags + ":错误描述_ IDataListener 返回值解析异常,异常信息为:" + e);
-                }
-                // 请求结果出现异常
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (isDialogDismiss && isDialogDismissWhenFail) {
-                            dismissDialog();
-                        }
-                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                        }
-                        if (iResultCallBack != null) {
-                            iResultCallBack.onFailRequest(baseResult.errorInfo);
-                            iResultCallBack.onFail(baseResult.errorInfo);
-                            iResultCallBack.onFinal(baseResult);
-                        }
-                    }
-                });
-                return false;
-            }
-        }
-        if (iDataListenerCurr.isFail(baseHttpParams, baseResult)) {
-            baseResult.success = false;
-            // 返回值提示错误
-            BaseErrorInfo baseErrorInfo = iDataListenerCurr.getFailErrorInfo();
-            if (baseErrorInfo == null) {
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error_default;
-                baseResult.errorInfo.errorMsg = "请求失败,请稍后重试";
-            } else {
-                baseResult.errorInfo = baseErrorInfo;
-            }
-
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, "".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onFailRequest(baseResult.errorInfo);
-                        iResultCallBack.onFail(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        } else if (iDataListenerCurr.isEmpty(baseHttpParams, baseResult)) {
-            baseResult.success = true;
-            baseResult.isEmpty = true;
-            // 返回值提示错误
-            BaseErrorInfo baseErrorInfo = iDataListenerCurr.getEmptyErrorInfo();
-            if (baseErrorInfo == null) {
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_none;
-                baseResult.errorInfo.errorMsg = "未获取到数据";
-            } else {
-                baseResult.errorInfo = baseErrorInfo;
-            }
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenEmpty) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowEmptyMessage) {
-                        iMessageManager.showEmptyMessages(contextStatic, "".equals(emptyMsg) ? baseResult.errorInfo.errorMsg : emptyMsg);
-                    }
-                    if (iResultCallBack != null) {
-                        iResultCallBack.onEmpty(baseResult.errorInfo);
-                        iResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        return true;
-    }
-
-
-    /************************ 上传文件设置 ********************************/
-    // 是否同步上传 默认 是
-    public boolean isSysn  = true;
-    public BaseHttpUtils initUploadSysn(boolean isSysn){
-        this.isSysn = isSysn;
-        return this;
-    }
-    // 最大异步上传个数（最大是3）
-    public int maxUploadCount = 3;
-    public BaseHttpUtils initMaxUploadCount(int maxUploadCount){
-        this.maxUploadCount = maxUploadCount;
-        return this;
-    }
-
-    public List<File> listFiles = new ArrayList<>();
-    public List<String> listFilesKey = new ArrayList<>();
-
-    public BaseHttpUtils initFilePath(String filePath) {
-        File file = new File(filePath);
-        return initFile(file);
-    }
-
-    public BaseHttpUtils initFile(File file) {
-        if (file != null) {
-            listFiles.add(file);
-        }
-        return this;
-    }
-    public BaseHttpUtils initFilesList(List<File> fileList) {
-        this.listFiles.addAll(fileList);
-        return this;
-    }
-
-    public BaseHttpUtils initFileList(String... filePathList) {
-        for (String s : filePathList) {
-            initFilePath(s);
-        }
-        return this;
-    }
-
-    public BaseHttpUtils initFileList(List<String> filePathList) {
-        for (String s : filePathList) {
-            initFilePath(s);
-        }
-        return this;
-    }
-
-
-    public BaseHttpUtils initFileKeyList(String... filePathList) {
-        for (String s : filePathList) {
-            listFilesKey.add(s);
-        }
-        return this;
-    }
-
-    /**
-     * key生成策略
-     * isChange = true   keyFirst0 keyFirst1 keyFirst2 keyFirst3...
-     * isChange = false   keyFirst keyFirst keyFirst keyFirst...
-     *
-     * @param keyFirst
-     * @param isChange
-     * @return
-     */
-    String keyFirst = "file";
-    boolean isKeyChange = false;
-    // key自动生成。
-    boolean isKeyAuto = false;
-
-    public BaseHttpUtils initFileKey(String keyFirst, boolean isKeyChange) {
-        isKeyAuto = true;
-        this.keyFirst = keyFirst;
-        this.isKeyChange = isKeyChange;
-        return this;
-    }
-
-    // 上传完成后需要不需要删除文件
-    public BaseHttpUtils initFileDelete(boolean delete) {
-        baseHttpParams.isDelete = delete;
-        return this;
-    }
 
-    /**
-     * 文件上传请求回调
-     */
-    IHttpFileResultCallBack iHttpFileResultCallBack;
-
-    public BaseHttpUtils initHttpFileResultCallBack(IHttpFileResultCallBack iHttpFileResultCallBack) {
-        this.iHttpFileResultCallBack = iHttpFileResultCallBack;
-        return this;
-    }
-
-    public void upload() {
-        if (Looper.myLooper() == Looper.getMainLooper()) {
-            BaseThreadPoolUtil.execute(new Runnable() {
-                @Override
-                public void run() {
-                    uploads();
-                }
-            });
-        } else {
-            uploads();
-        }
-    }
-
-    private void uploads() { // log开关设置
-        baseHttpParams.openLog = checkLog();
-        settingMessageManager();
-
-        if ("".equals(baseHttpParams.url) || null == baseHttpParams.url) {
-            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ":错误描述_ url不能为空");
-            }
-            deleteFile();
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    baseResult.errorInfo.errorMsg = "url不能为空";
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
+            mBaseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
+            mBaseResult.errorInfo.exception = e;
+            onFail();
             return;
         }
 
-        if (baseHttpParams.openLog) {
-            Log.e(TAG, baseHttpParams.tags + ": 开始上传文件");
-            Log.e(TAG, baseHttpParams.tags + ": url = " + baseHttpParams.url);
-            Log.e(TAG, baseHttpParams.tags + ": 上传文件个数:" + listFiles.size());
-        }
-        if (!settingFileServiceAndDataListener()) {
-            deleteFile();
+        /*
+         * 开始请求
+         */
+        //1.解析参数
+        mBaseHttpParams.params = mHttpService.parseParams(mBaseHttpParams.paramsList);
+        // 打印log
+        BaseLogUtils.logE(mBaseHttpParams.tags, mBaseHttpParams.openLog,
+                "提交方式   :" + mBaseHttpParams.request_type.toString() + "\n" +
+                        "返回值类型 :" + mBaseHttpParams.dataParseType.toString() + "\n" +
+                        "url        :" + mBaseHttpParams.url + "\n" +
+                        "params     :" + mHttpService.getRequestParamsDesc(mBaseHttpParams.params));
+        //2.执行请求
+        BaseRequestResult baseRequestResult = mHttpService.request(mBaseHttpParams);
+        // 判断请求结果
+        if (baseRequestResult == null) {
+            mBaseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpFail;
+            mBaseResult.errorInfo.errorMsg = "";
+            onFail();
             return;
         }
-        if (!checkFiles()) {
-            deleteFile();
-            return;
-        }
-        if(isSysn || listFiles.size() == 1){
-            // 同步
-            if (!callFileHttpRequest()) {
-                deleteFile();
-                return;
-            }
-            if (!callFileDataParse()) {
-                deleteFile();
-                return;
-            }
-        }else{
-            boolean flag = false;
-//            startUpload();
-        }
-        if (baseHttpParams.openLog) {
-            Log.e(BaseHttpConfig.TAG, tags + ": 文件上传成功");
-        }
-        deleteFile();
-        mHandler.post(new Runnable() {
-            @Override
-            public void run() {
-                if (isDialogDismiss && isDialogDismissWhenSuccess) {
-                    dismissDialog();
-                }
-                if (iMessageManager != null && isShowMessage && isShowSuccessMessage) {
-                    iMessageManager.showMessages(contextStatic, "".equals(successMsg) ? baseResult.errorInfo.errorMsg : successMsg);
-                }
-                if (iHttpFileResultCallBack != null) {
-                    iHttpFileResultCallBack.onSuccess(baseResult);
-                    iHttpFileResultCallBack.onFinal(baseResult);
-                }
-            }
-        });
-
-    }
-
-    // 根据传入的值 初始化 IFileService 和 IDataListener
-    private boolean settingFileServiceAndDataListener() {
-        /******************** 发送前检查 ***********************/
-        baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-        try {
-            // 获取当前的 数据请求工具类
-            iFileServiceCurr = (iFileServiceCurr == null) ? (IFileService) (iFileServiceStatic == null ? null : iFileServiceStatic.newInstance()) : iFileServiceCurr;
-            // 获取当前的 数据解析工具类
-            iFileDataListenerCurr = iFileDataListenerCurr == null ? (IDataListener) (iFileDataStatic == null ? null : iFileDataStatic.newInstance()) : iFileDataListenerCurr;
-        } catch (IllegalAccessException e) {
-            e.printStackTrace();
-        } catch (InstantiationException e) {
-            e.printStackTrace();
-        }
-        // 检查调用方式是否正确
-        if ((iFileServiceCurr == null || iFileDataListenerCurr == null)) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ": 请先初始化设置好文件处理工具和解析工具类");
-            }
-            baseResult.errorInfo.errorMsg = "请先初始化设置好文件处理工具和解析工具类";
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        } else {
-//            if (iHttpServiceFilter != null && iHttpServiceCurr != null) {
-//                iHttpServiceFilter.filterIHttpService(iHttpServiceCurr);
-//            }
-//            if (iDataListenerFilter != null && iDataListenerCurr != null) {
-//                iDataListenerFilter.filterIDataListener(iDataListenerCurr);
-//            }
-//            // filterIHttpService 和 filterIDataListener 以后 再做一次非空判断
-//            if ((iHttpServiceCurr == null || iDataListenerCurr == null)) {
-//                if (baseHttpParams.openLog) {
-//                    Log.e(BaseHttpConfig.TAG, tags + ": filterIHttpService 和 filterIDataListener 方法不能设置参数为null");
-//                }
-//                baseResult.errorInfo.errorMsg = "filterIHttpService 和 filterIDataListener 方法不能设置参数为null";
-//                mHandler.post(new Runnable() {
-//                    @Override
-//                    public void run() {
-//                        if (isDialogDismiss && isDialogDismissWhenFail) {
-//                            dismissDialog();
-//                        }
-//                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-//                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-//                        }
-//                        if (iHttpFileResultCallBack != null) {
-//                            iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-//                            iHttpFileResultCallBack.onFinal(baseResult);
-//                        }
-//                    }
-//                });
-//                return false;
-//            }
-            return true;
-        }
-    }
-
-    // 检查文件是否可用
-    private boolean checkFiles() {
-        baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_File_error;
-        if (listFiles.isEmpty()) {
-            baseResult.errorInfo.errorMsg = "上传文件为空";
-
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, "".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        } else {
-            if (!isKeyAuto) {
-                if (listFiles.size() != listFilesKey.size()) {
-                    baseResult.errorInfo.errorMsg = "未设置上传文件的key值";
-                    if (baseHttpParams.openLog) {
-                        Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-                    }
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (isDialogDismiss && isDialogDismissWhenFail) {
-                                dismissDialog();
-                            }
-                            if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                                iMessageManager.showErrorMessages(contextStatic, "".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);
-                            }
-                            if (iHttpFileResultCallBack != null) {
-                                iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                                iHttpFileResultCallBack.onFinal(baseResult);
-                            }
-                        }
-                    });
-
-                    return false;
-                }
-            } else {
-                listFilesKey.clear();
-            }
-            boolean flag = true;
-            for (int i = 0; i < listFiles.size(); i++) {
-                File file = listFiles.get(i);
-                if (!file.exists()) {
-                    baseResult.errorInfo.errorMsg = "第" + (i + 1) + "个文件不存在: 路径为:" + file.getPath();
-                    if (baseHttpParams.openLog) {
-                        Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-                    }
-                    mHandler.post(new Runnable() {
-                        @Override
-                        public void run() {
-                            if (isDialogDismiss && isDialogDismissWhenFail) {
-                                dismissDialog();
-                            }
-                            if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                                iMessageManager.showErrorMessages(contextStatic, "".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);
-                            }
-                            if (iHttpFileResultCallBack != null) {
-                                iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                                iHttpFileResultCallBack.onFinal(baseResult);
-                            }
-                        }
-                    });
-                    flag = false;
-                    break;
-                }
-                if (isKeyAuto) {
-                    listFilesKey.add(isKeyChange ? (keyFirst + i) : keyFirst);
-                }
-                if (baseHttpParams.openLog) {
-                    Log.e(TAG, baseHttpParams.tags + ": 第" + (i + 1) + "个文件: 路径为:" + file.getPath() + ", key = " + listFilesKey.get(i));
-                }
-            }
-            if (flag) {
-                baseHttpParams.fileList = listFiles;
-                baseHttpParams.fileKeys = listFilesKey;
-            }
-            return flag;
-        }
-    }
-
-    // 删除文件
-    private void deleteFile(){
-        if(baseHttpParams.isDelete && !listFiles.isEmpty()){
-            for (File listFile : listFiles) {
-                if(listFile.exists()){
-                    listFile.delete();
-                }
-            }
-        }
-    }
-
-    // 文件上传
-    private boolean callFileHttpRequest() {
-        BaseRequestResult baseRequestResult = iFileServiceCurr.uploadFile(baseHttpParams, new IFileUploadListener() {
-            @Override
-            public void onFileProgress(final int position,final File file,final long curlenth,final long total) {
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (iHttpFileResultCallBack != null) {
-                            iHttpFileResultCallBack.onFileProgress(position,file,curlenth,total);
-                        }
-                    }
-                });
-            }
-        });
-        if (baseRequestResult == null || !baseRequestResult.checkResult()) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ":错误描述_ IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定");
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    BaseErrorInfo baseErrorInfos = new BaseErrorInfo();
-                    baseErrorInfos.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-                    baseErrorInfos.errorMsg = "IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定";
-                    baseResult.errorInfo = baseErrorInfos;
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseErrorInfos);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.baseRequestResult = baseRequestResult;
-        if (!baseRequestResult.isSuccess) {
-            baseResult.success = false;
-            baseResult.errorInfo = baseRequestResult.errorInfo;
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.baseRequestResult.isSuccess = true;
-        return true;
-    }
-
-    // 文件上传后的数据解析
-    private boolean callFileDataParse() {
-        /******************** 解析返回值 ***********************/
-        if (baseHttpParams.openLog) {
-            Log.e(BaseHttpConfig.TAG, tags + ": 开始解析返回值...");
-        }
-        byte[] bytes = baseResult.baseRequestResult.bytes;
-
-        baseResult.result = new BaseResult.Result();
-        baseResult.result.resultAll = new String(bytes);
-        baseResult.result.resultData = baseResult.result.resultAll;
-        if (baseHttpParams.openLog) {
-            Log.e(TAG, baseHttpParams.tags + ":返回值的结果是: " + baseResult.result.resultAll);
+        if(!baseRequestResult.isSuccess){
+            mBaseResult.errorInfo = baseRequestResult.errorInfo;
+            onFail();
+            return;
         }
-        String resultData = "";
-        try {
-            resultData = iFileDataListenerCurr.parseResult(baseHttpParams, bytes);
-        } catch (Exception e) {
-            resultData = "";
+        BaseLogUtils.logE(mBaseHttpParams.tags,mBaseHttpParams.openLog,
+                "成功获取到返回值, result = " + new String(baseRequestResult.bytes));
 
-            baseResult.success = false;
-            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;
-            baseResult.errorInfo.exception = e;
-            baseResult.errorInfo.errorMsg = "IDataListener parseResult方法出现异常,异常信息为:" + e;
-
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ IDataListener parseResult方法出现异常,异常信息为:" + e);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.result.resultData = resultData;
-
-        if (resultData != null && !"".equals(resultData) && !"null".equals(resultData)) {
-            try {
-                switch (baseHttpParams.dataParseType) {
-                    case List:
-                        baseResult.result.setResult_list(iFileDataListenerCurr.parseList(baseHttpParams, resultData));
-                        break;
-                    case Object:
-                        baseResult.result.setResult_object(iFileDataListenerCurr.parseObject(baseHttpParams, resultData));
-                        break;
-                    case Combination:
-                        baseResult.result.setResult_list_combination(iFileDataListenerCurr.parseCombination(baseHttpParams, resultData));
-                        break;
-                    case String:
-                        baseResult.result.setResult_str(iFileDataListenerCurr.parseDefault(baseHttpParams, resultData));
-                    default:
-                        break;
-                }
-            } catch (Exception e) {
-                baseResult.success = false;
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;
-                baseResult.errorInfo.exception = e;
-                baseResult.errorInfo.errorMsg = "IDataListener 返回值解析异常,异常信息为:" + e;
-
-                if (baseHttpParams.openLog) {
-                    Log.e(TAG, baseHttpParams.tags + ":错误描述_ IDataListener 返回值解析异常,异常信息为:" + e);
-                }
-                // 请求结果出现异常
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (isDialogDismiss && isDialogDismissWhenFail) {
-                            dismissDialog();
-                        }
-                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                        }
-                        if (iHttpFileResultCallBack != null) {
-                            iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                            iHttpFileResultCallBack.onFinal(baseResult);
-                        }
-                    }
-                });
-                return false;
-            }
-        }
-        if (iFileDataListenerCurr.isFail(baseHttpParams, baseResult)) {
-            baseResult.success = false;
-            // 返回值提示错误
-            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getFailErrorInfo();
-            if (baseErrorInfo == null) {
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error_default;
-                baseResult.errorInfo.errorMsg = "请求失败,请稍后重试";
-            } else {
-                baseResult.errorInfo = baseErrorInfo;
-            }
-
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, "".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        } else if (iFileDataListenerCurr.isEmpty(baseHttpParams, baseResult)) {
-            baseResult.success = true;
-            baseResult.isEmpty = true;
-            // 返回值提示错误
-            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getEmptyErrorInfo();
-            if (baseErrorInfo == null) {
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_none;
-                baseResult.errorInfo.errorMsg = "未获取到数据";
-            } else {
-                baseResult.errorInfo = baseErrorInfo;
-            }
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenEmpty) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowEmptyMessage) {
-                        iMessageManager.showEmptyMessages(contextStatic, "".equals(emptyMsg) ? baseResult.errorInfo.errorMsg : emptyMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onEmpty(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        return true;
-    }
-
-    // 已经完成上传的个数
-    private int uploadedCount = 0;
-    private void asynUpload(){
-        if(listFiles.size() <= maxUploadCount){
-            // 需要上传的文件没有达到最大上传数
-            for (int i = 0; i < listFiles.size(); i++) {
-                BaseThreadPoolUtil.execute(new Runnable() {
-                    @Override
-                    public void run() {
-                        isAsynUploadFinish();
-                    }
-                });
-            }
-        }else{
-            // 最开始启动 maxUploadCount个线程用于上传
-            if(uploadedCount == 0){
-                // 异步
-                for (int i = 0; i < maxUploadCount; i++) {
-                    BaseThreadPoolUtil.execute(new Runnable() {
-                        @Override
-                        public void run() {
-                            isAsynUploadFinish();
-                        }
-                    });
-                }
+        /*
+         * 开始解析参数
+         */
+        try {
+            String result = mDataListener.parseResult(mBaseHttpParams,baseRequestResult);
+            mBaseResult.success = mDataListener.isSuccess(mBaseHttpParams,result);
+            if(mBaseResult.success){
+                mBaseResult.result = new BaseResult.Result();
+                mBaseResult.result.resultAll = result;
+                onSuccess();
             }else{
-                BaseThreadPoolUtil.execute(new Runnable() {
-                    @Override
-                    public void run() {
-                        isAsynUploadFinish();
-                    }
-                });
-            }
-        }
-    }
-    // 是否全部上传完成
-    private boolean isAsynUploadFinish(){
-        uploadedCount+=1;
-        if(uploadedCount == listFiles.size()){
-            // 全部完成
-            return true;
-        }
-        // 上传其他的
-        asynUpload();
-        return false;
-    }
-    // 异步上传
-    private boolean callFileByAsyn(){
-        BaseRequestResult baseRequestResult = iFileServiceCurr.uploadFile(baseHttpParams, new IFileUploadListener() {
-            @Override
-            public void onFileProgress(final int position,final File file,final long curlenth,final long total) {
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (iHttpFileResultCallBack != null) {
-                            iHttpFileResultCallBack.onFileProgress(position,file,curlenth,total);
-                        }
-                    }
-                });
-            }
-        });
-        if (baseRequestResult == null || !baseRequestResult.checkResult()) {
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, tags + ":错误描述_ IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定");
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    BaseErrorInfo baseErrorInfos = new BaseErrorInfo();
-                    baseErrorInfos.errorCode = BaseHttpConfig.ErrorCode.Error_Use;
-                    baseErrorInfos.errorMsg = "IFileService的uploadFile方法中 返回值BaseRequestResult不符合规定";
-                    baseResult.errorInfo = baseErrorInfos;
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseErrorInfos);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.baseRequestResult = baseRequestResult;
-        if (!baseRequestResult.isSuccess) {
-            baseResult.success = false;
-            baseResult.errorInfo = baseRequestResult.errorInfo;
-            if (baseHttpParams.openLog) {
-                Log.e(BaseHttpConfig.TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.baseRequestResult.isSuccess = true;
-
-        /******************** 解析返回值 ***********************/
-        if (baseHttpParams.openLog) {
-            Log.e(BaseHttpConfig.TAG, tags + ": 开始解析返回值...");
-        }
-        byte[] bytes = baseResult.baseRequestResult.bytes;
-
-        baseResult.result = new BaseResult.Result();
-        baseResult.result.resultAll = new String(bytes);
-        baseResult.result.resultData = baseResult.result.resultAll;
-        if (baseHttpParams.openLog) {
-            Log.e(TAG, baseHttpParams.tags + ":返回值的结果是: " + baseResult.result.resultAll);
-        }
-        String resultData = "";
-        try {
-            resultData = iFileDataListenerCurr.parseResult(baseHttpParams, bytes);
+                mBaseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_ResultFail;
+                onFail();
+            }
         } catch (Exception e) {
-            resultData = "";
-
-            baseResult.success = false;
-            baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;
-            baseResult.errorInfo.exception = e;
-            baseResult.errorInfo.errorMsg = "IDataListener parseResult方法出现异常,异常信息为:" + e;
-
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ IDataListener parseResult方法出现异常,异常信息为:" + e);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        baseResult.result.resultData = resultData;
+            e.printStackTrace();
+            mBaseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_ResultFail;
+            mBaseResult.errorInfo.exception = e;
+            onFail();
+        }
+    }
+
+    // 成功
+    private void onSuccess() {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mBaseResult.success = true;
+                BaseLogUtils.logE(mBaseHttpParams.tags,mBaseHttpParams.openLog,
+                        "此次请求结束");
+                mBaseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Success;
+                mBaseResult.errorInfo.errorMsg = "";
+                mBaseResult.errorInfo.exception = null;
+                if (mHttpResultCallBack != null) {
+                    mHttpResultCallBack.onSuccess(mBaseResult);
+                    mHttpResultCallBack.onFinal(mBaseResult);
+                }
+            }
+        });
+    }
 
-        if (resultData != null && !"".equals(resultData) && !"null".equals(resultData)) {
-            try {
-                switch (baseHttpParams.dataParseType) {
-                    case List:
-                        baseResult.result.setResult_list(iFileDataListenerCurr.parseList(baseHttpParams, resultData));
-                        break;
-                    case Object:
-                        baseResult.result.setResult_object(iFileDataListenerCurr.parseObject(baseHttpParams, resultData));
-                        break;
-                    case Combination:
-                        baseResult.result.setResult_list_combination(iFileDataListenerCurr.parseCombination(baseHttpParams, resultData));
-                        break;
-                    case String:
-                        baseResult.result.setResult_str(iFileDataListenerCurr.parseDefault(baseHttpParams, resultData));
-                    default:
-                        break;
-                }
-            } catch (Exception e) {
-                baseResult.success = false;
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error;
-                baseResult.errorInfo.exception = e;
-                baseResult.errorInfo.errorMsg = "IDataListener 返回值解析异常,异常信息为:" + e;
-
-                if (baseHttpParams.openLog) {
-                    Log.e(TAG, baseHttpParams.tags + ":错误描述_ IDataListener 返回值解析异常,异常信息为:" + e);
-                }
-                // 请求结果出现异常
-                mHandler.post(new Runnable() {
-                    @Override
-                    public void run() {
-                        if (isDialogDismiss && isDialogDismissWhenFail) {
-                            dismissDialog();
-                        }
-                        if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                            iMessageManager.showErrorMessages(contextStatic, baseResult.errorInfo.errorMsg);
-                        }
-                        if (iHttpFileResultCallBack != null) {
-                            iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                            iHttpFileResultCallBack.onFinal(baseResult);
-                        }
-                    }
-                });
-                return false;
-            }
-        }
-        if (iFileDataListenerCurr.isFail(baseHttpParams, baseResult)) {
-            baseResult.success = false;
-            // 返回值提示错误
-            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getFailErrorInfo();
-            if (baseErrorInfo == null) {
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_Parsr_error_default;
-                baseResult.errorInfo.errorMsg = "请求失败,请稍后重试";
-            } else {
-                baseResult.errorInfo = baseErrorInfo;
-            }
+    // 失败
+    private void onFail() {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                mBaseResult.success = false;
+                BaseLogUtils.logE(mBaseHttpParams.tags,mBaseHttpParams.openLog,
+                        mBaseResult.errorInfo.toString());
+                if (mHttpResultCallBack != null) {
+                    mHttpResultCallBack.onFail(mBaseResult.errorInfo);
+                    mHttpResultCallBack.onFinal(mBaseResult);
+                }
+            }
+        });
+    }
 
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenFail) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowErrorMessage) {
-                        iMessageManager.showErrorMessages(contextStatic, "".equals(errorMsg) ? baseResult.errorInfo.errorMsg : errorMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onFail(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        } else if (iFileDataListenerCurr.isEmpty(baseHttpParams, baseResult)) {
-            baseResult.success = true;
-            baseResult.isEmpty = true;
-            // 返回值提示错误
-            BaseErrorInfo baseErrorInfo = iFileDataListenerCurr.getEmptyErrorInfo();
-            if (baseErrorInfo == null) {
-                baseResult.errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_Result_none;
-                baseResult.errorInfo.errorMsg = "未获取到数据";
-            } else {
-                baseResult.errorInfo = baseErrorInfo;
-            }
-            if (baseHttpParams.openLog) {
-                Log.e(TAG, baseHttpParams.tags + ":错误描述_ " + baseResult.errorInfo.errorMsg);
-            }
-            // 请求结果出现异常
-            mHandler.post(new Runnable() {
-                @Override
-                public void run() {
-                    if (isDialogDismiss && isDialogDismissWhenEmpty) {
-                        dismissDialog();
-                    }
-                    if (iMessageManager != null && isShowMessage && isShowEmptyMessage) {
-                        iMessageManager.showEmptyMessages(contextStatic, "".equals(emptyMsg) ? baseResult.errorInfo.errorMsg : emptyMsg);
-                    }
-                    if (iHttpFileResultCallBack != null) {
-                        iHttpFileResultCallBack.onEmpty(baseResult.errorInfo);
-                        iHttpFileResultCallBack.onFinal(baseResult);
-                    }
-                }
-            });
-            return false;
-        }
-        return true;
-    }
-
-
-    class MyRunnable implements Runnable {
-        int position;
-        public MyRunnable(int position){
-            this.position = position;
-        }
-        @Override
-        public void run() {
-            System.out.println(position+":当前执行第"+(position+1)+"个");
-            try {
-                Thread.sleep(500);
-                uploaded(position);
-            } catch (InterruptedException e) {
-                e.printStackTrace();
-            }
-        }
-    }
-    static int listFileSize = 9;
-    static int maxSize = 3;
-    static int startedCount;
-    static int uploadSuccessCount = 0;
-    public void startUpload(){
-        // 每次需要处理的个数
-        int uploadCount = Math.min(maxSize, listFileSize);
-
-        startedCount = uploadCount;
-
-        for(int i = 0 ; i < uploadCount; i++){
-            System.out.println(i+":开始执行第"+(i+1)+"个");
-            new Thread(new MyRunnable(i)).start();
-        }
-    }
-    public synchronized void uploaded(int position) {
-        uploadSuccessCount+=1;
-        System.out.println(position+":执行第"+(position+1)+"个成功,一共成功了"+uploadSuccessCount+"个");
-        if(uploadSuccessCount == listFileSize){
-            System.out.println("上传成功");
-        }else if(startedCount < listFileSize){
-            test2();
-        }
-    }
-    public synchronized void test2(){
-        startedCount+=1;
-        if(startedCount == listFileSize){
-            System.out.println("全部执行完毕");
-        }
-        System.out.println(startedCount+":开始执行第"+(startedCount)+"个");
-        new Thread(new MyRunnable(startedCount-1)).start();
-    }
 }
Index: lib_http/src/main/java/com/xhttp/lib/impl/data/JsonDataListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/data/JsonDataListener.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/impl/data/JsonDataListener.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
@@ -1,73 +0,0 @@
-package com.xhttp.lib.impl.data;
-
-import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
-import com.xhttp.lib.interfaces.data.IDataListener;
-import com.xhttp.lib.util.DataUtil;
-
-import java.util.List;
-import java.util.Map;
-
-/**
- * Created by lixingxing on 2019/4/8.
- */
-public class JsonDataListener implements IDataListener {
-    @Override
-    public String parseResult(BaseHttpParams baseHttpParams, byte[] bytes) throws Exception {
-        String results = new String(bytes);
-        return results;
-    }
-
-    @Override
-    public List parseList(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        List<Object> lists;
-        try {
-            lists = DataUtil.parseJsonToList(resultObj, baseHttpParams.aClass);
-        } catch (Exception e) {
-            throw e;
-        }
-        return lists;
-    }
-
-    @Override
-    public Object parseObject(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        Object object = null;
-        try {
-            object = DataUtil.parseJsonToObject(resultObj, baseHttpParams.aClass);
-        } catch (Exception e) {
-            throw e;
-        }
-        return object;
-    }
-
-    @Override
-    public String parseDefault(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        return resultObj;
-    }
-
-    @Override
-    public Map<String, Object> parseCombination(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        return null;
-    }
-
-    @Override
-    public boolean isFail(BaseHttpParams baseHttpParams, BaseResult baseResult) {
-        return false;
-    }
-
-    @Override
-    public BaseErrorInfo getFailErrorInfo() {
-        return null;
-    }
-
-    @Override
-    public boolean isEmpty(BaseHttpParams baseHttpParams, BaseResult baseResult) {
-        return false;
-    }
-
-    @Override
-    public BaseErrorInfo getEmptyErrorInfo() {
-        return null;
-    }
-}
Index: lib_http/src/main/java/com/xhttp/lib/impl/service/DefaultHttpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.impl.service;\r\n\r\nimport android.util.Log;\r\n\r\nimport com.xhttp.lib.config.BaseHttpConfig;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.interfaces.http.IHttpService;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\nimport com.xhttp.lib.util.RequestUtil;\r\n\r\nimport java.util.Map;\r\nimport java.util.Set;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/27.\r\n */\r\npublic class DefaultHttpService implements IHttpService {\r\n\r\n    @Override\r\n    public Object parseParams(BaseHttpParams baseHttpParams) {\r\n        String params = \"\";\r\n        // 如果是post提交方式\r\n        if(baseHttpParams.request_type == BaseHttpConfig.RequestType.POST){\r\n            if(baseHttpParams.params instanceof Object[]){\r\n                Object[] p = (Object[]) baseHttpParams.params;\r\n                for (int i = 0; i < p.length; i+=2) {\r\n                    params +=  \"&\" + p[i]+\"=\"+p[i+1];\r\n                }\r\n            }else if(baseHttpParams.params instanceof Map){\r\n                Map p = (Map) baseHttpParams.params;\r\n                Set key =  p.keySet();\r\n                for (Object o : key) {\r\n                    params +=  \"&\" + o +\"=\"+p.get(o);\r\n                }\r\n            }else{\r\n                params = (String) baseHttpParams.params;\r\n            }\r\n        }\r\n        if (baseHttpParams.openLog) {\r\n            Log.e(\"BaseHttpUtils\", baseHttpParams.tags + \":\\n\" +\r\n                    baseHttpParams.request_type.toString() + \"\\n\" +\r\n                    baseHttpParams.dataParseType.toString()+ \"\\n\" +\r\n                    baseHttpParams.url + \"\\n\" +\r\n                    params);\r\n        }\r\n        return params;\r\n    }\r\n\r\n    @Override\r\n    public BaseRequestResult request(BaseHttpParams baseHttpParams) {\r\n        BaseRequestResult baseRequestResult =\r\n                new RequestUtil(baseHttpParams)\r\n                .Request_ContentType(BaseHttpConfig.ParamType.DEFAULT)\r\n                .Request_requestType(baseHttpParams.request_type)\r\n                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)\r\n                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)\r\n                .request((baseHttpParams.params == null ? \"\" : baseHttpParams.params.toString()), baseHttpParams.url);\r\n        return baseRequestResult;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/service/DefaultHttpService.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/impl/service/DefaultHttpService.java	(date 1608781398812)
@@ -1,60 +1,41 @@
 package com.xhttp.lib.impl.service;
 
-import android.util.Log;
-
-import com.xhttp.lib.config.BaseHttpConfig;
-import com.xhttp.lib.config.BaseHttpParams;
+import android.util.Pair;
 import com.xhttp.lib.interfaces.http.IHttpService;
 import com.xhttp.lib.model.BaseRequestResult;
-import com.xhttp.lib.util.RequestUtil;
+import com.xhttp.lib.params.BaseHttpParams;
+import com.xhttp.lib.rquest.BaseHttpRequestUtils;
 
-import java.util.Map;
-import java.util.Set;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.List;
 
 /**
  * Created by lixingxing on 2019/3/27.
  */
 public class DefaultHttpService implements IHttpService {
 
+    protected String paramsStr = "";
+
     @Override
-    public Object parseParams(BaseHttpParams baseHttpParams) {
-        String params = "";
-        // 如果是post提交方式
-        if(baseHttpParams.request_type == BaseHttpConfig.RequestType.POST){
-            if(baseHttpParams.params instanceof Object[]){
-                Object[] p = (Object[]) baseHttpParams.params;
-                for (int i = 0; i < p.length; i+=2) {
-                    params +=  "&" + p[i]+"="+p[i+1];
-                }
-            }else if(baseHttpParams.params instanceof Map){
-                Map p = (Map) baseHttpParams.params;
-                Set key =  p.keySet();
-                for (Object o : key) {
-                    params +=  "&" + o +"="+p.get(o);
-                }
-            }else{
-                params = (String) baseHttpParams.params;
-            }
+    public Object parseParams(List<Pair<String, Object>> params) {
+        for (Pair<String, Object> param : params) {
+            paramsStr +=  param.first + "=" + param.second + "&";
         }
-        if (baseHttpParams.openLog) {
-            Log.e("BaseHttpUtils", baseHttpParams.tags + ":\n" +
-                    baseHttpParams.request_type.toString() + "\n" +
-                    baseHttpParams.dataParseType.toString()+ "\n" +
-                    baseHttpParams.url + "\n" +
-                    params);
-        }
-        return params;
+        return paramsStr;
     }
 
     @Override
-    public BaseRequestResult request(BaseHttpParams baseHttpParams) {
-        BaseRequestResult baseRequestResult =
-                new RequestUtil(baseHttpParams)
-                .Request_ContentType(BaseHttpConfig.ParamType.DEFAULT)
-                .Request_requestType(baseHttpParams.request_type)
-                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)
-                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)
-                .request((baseHttpParams.params == null ? "" : baseHttpParams.params.toString()), baseHttpParams.url);
+    public String getRequestParamsDesc(Object params) {
+        return params.toString();
+    }
+
+    @Override
+    public @NotNull
+    BaseRequestResult request(final BaseHttpParams baseHttpParams) {
+        BaseHttpRequestUtils baseHttpRequestUtils = new BaseHttpRequestUtils(
+                baseHttpParams);
+        BaseRequestResult baseRequestResult = baseHttpRequestUtils.request(paramsStr);
         return baseRequestResult;
     }
 
Index: lib_http/src/main/java/com/xhttp/lib/impl/service/OKHttpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/service/OKHttpService.java	(date 1577255342987)
+++ lib_http/src/main/java/com/xhttp/lib/impl/service/OKHttpService.java	(date 1577255342987)
@@ -0,0 +1,7 @@
+package com.xhttp.lib.impl.service;
+
+/**
+ * @author Lixingxing
+ */
+public class OKHttpService extends DefaultHttpService {
+}
Index: lib_http/src/main/java/com/xhttp/lib/impl/service/JsonHttpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.impl.service;\r\n\r\nimport android.util.Log;\r\n\r\nimport com.xhttp.lib.config.BaseHttpConfig;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.interfaces.http.IHttpService;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\nimport com.xhttp.lib.util.RequestUtil;\r\n\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.Map;\r\n\r\n/**\r\n * Json请求\r\n * Created by lixingxing on 2019/3/27.\r\n */\r\npublic class JsonHttpService implements IHttpService {\r\n\r\n    @Override\r\n    public Object parseParams(BaseHttpParams baseHttpParams) {\r\n        String params = \"\";\r\n        // 如果是post提交方式 处理参数\r\n        if(baseHttpParams.request_type == BaseHttpConfig.RequestType.POST){\r\n            if(baseHttpParams.params instanceof Object[]){\r\n                Object[] p = (Object[]) baseHttpParams.params;\r\n                JSONObject jsonObject = new JSONObject();\r\n                for (int i = 0; i < p.length; i+=2) {\r\n                    try {\r\n                        jsonObject.put((String) p[i],p[i+1]);\r\n                    } catch (JSONException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                params = jsonObject.toString();\r\n            }else if(baseHttpParams.params instanceof Map){\r\n                Map p = (Map) baseHttpParams.params;\r\n                JSONObject jsonObject = new JSONObject(p);\r\n                params = jsonObject.toString();\r\n            }else{\r\n                params = (String) baseHttpParams.params;\r\n            }\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(\"BaseHttpUtils\", baseHttpParams.tags + \":\\n\" +\r\n                        baseHttpParams.request_type.toString() + \"\\n\" +\r\n                        baseHttpParams.dataParseType.toString()+ \"\\n\" +\r\n                        baseHttpParams.url + \"\\n\" +\r\n                        params);\r\n            }\r\n        }else{\r\n            if (baseHttpParams.openLog) {\r\n                Log.e(\"BaseHttpUtils\", baseHttpParams.tags + \":\\n\" +\r\n                        baseHttpParams.request_type.toString() + \"\\n\" +\r\n                        baseHttpParams.dataParseType.toString()+ \"\\n\" +\r\n                        baseHttpParams.url);\r\n            }\r\n        }\r\n        return params;\r\n    }\r\n\r\n    @Override\r\n    public BaseRequestResult request(BaseHttpParams baseHttpParams) {\r\n        BaseRequestResult request = new RequestUtil(baseHttpParams)\r\n                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)\r\n                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)\r\n                .Request_ContentType(BaseHttpConfig.ParamType.JSON)\r\n                .Request_requestType(baseHttpParams.request_type)\r\n                .request((baseHttpParams.params == null ? \"\" : baseHttpParams.params.toString()), baseHttpParams.url);\r\n        return request;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/service/JsonHttpService.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/impl/service/JsonHttpService.java	(date 1577255421317)
@@ -1,74 +1,52 @@
 package com.xhttp.lib.impl.service;
 
-import android.util.Log;
-
+import android.util.Pair;
 import com.xhttp.lib.config.BaseHttpConfig;
-import com.xhttp.lib.config.BaseHttpParams;
 import com.xhttp.lib.interfaces.http.IHttpService;
 import com.xhttp.lib.model.BaseRequestResult;
-import com.xhttp.lib.util.RequestUtil;
-
+import com.xhttp.lib.params.BaseHttpParams;
+import com.xhttp.lib.rquest.BaseHttpRequestUtils;
+import com.xhttp.lib.rquest.RequestUtil;
+import org.jetbrains.annotations.NotNull;
 import org.json.JSONException;
 import org.json.JSONObject;
 
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
+import java.util.Set;
 
 /**
- * Json请求
- * Created by lixingxing on 2019/3/27.
+ * @author Lixingxing
  */
 public class JsonHttpService implements IHttpService {
 
+
     @Override
-    public Object parseParams(BaseHttpParams baseHttpParams) {
-        String params = "";
-        // 如果是post提交方式 处理参数
-        if(baseHttpParams.request_type == BaseHttpConfig.RequestType.POST){
-            if(baseHttpParams.params instanceof Object[]){
-                Object[] p = (Object[]) baseHttpParams.params;
-                JSONObject jsonObject = new JSONObject();
-                for (int i = 0; i < p.length; i+=2) {
-                    try {
-                        jsonObject.put((String) p[i],p[i+1]);
-                    } catch (JSONException e) {
-                        e.printStackTrace();
-                    }
-                }
-                params = jsonObject.toString();
-            }else if(baseHttpParams.params instanceof Map){
-                Map p = (Map) baseHttpParams.params;
-                JSONObject jsonObject = new JSONObject(p);
-                params = jsonObject.toString();
-            }else{
-                params = (String) baseHttpParams.params;
+    public Object parseParams(List<Pair<String, Object>> params) {
+        JSONObject jsonObject = new JSONObject();
+        for (Pair<String, Object> param : params) {
+            try {
+                jsonObject.put(param.first,param.second);
+            } catch (JSONException e) {
+                e.printStackTrace();
             }
-            if (baseHttpParams.openLog) {
-                Log.e("BaseHttpUtils", baseHttpParams.tags + ":\n" +
-                        baseHttpParams.request_type.toString() + "\n" +
-                        baseHttpParams.dataParseType.toString()+ "\n" +
-                        baseHttpParams.url + "\n" +
-                        params);
-            }
-        }else{
-            if (baseHttpParams.openLog) {
-                Log.e("BaseHttpUtils", baseHttpParams.tags + ":\n" +
-                        baseHttpParams.request_type.toString() + "\n" +
-                        baseHttpParams.dataParseType.toString()+ "\n" +
-                        baseHttpParams.url);
-            }
         }
-        return params;
+        return jsonObject.toString();
     }
 
     @Override
-    public BaseRequestResult request(BaseHttpParams baseHttpParams) {
-        BaseRequestResult request = new RequestUtil(baseHttpParams)
-                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)
-                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)
-                .Request_ContentType(BaseHttpConfig.ParamType.JSON)
-                .Request_requestType(baseHttpParams.request_type)
-                .request((baseHttpParams.params == null ? "" : baseHttpParams.params.toString()), baseHttpParams.url);
-        return request;
+    public String getRequestParamsDesc(Object params) {
+        return params.toString();
     }
 
+    @Override
+    public @NotNull
+    BaseRequestResult request(final BaseHttpParams baseHttpParams) {
+        BaseHttpRequestUtils baseHttpRequestUtils = new BaseHttpRequestUtils(
+                baseHttpParams);
+        BaseRequestResult baseRequestResult =
+                baseHttpRequestUtils.request((baseHttpParams.params == null)?"":baseHttpParams.params.toString());
+        return baseRequestResult;
+    }
 }
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/data/IDataListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.data;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\n\r\nimport org.json.JSONException;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic interface IDataListener {\r\n    // 先处理一下返回值, 返回的内容应为接下来要解析的主体内容\r\n    String parseResult(BaseHttpParams baseHttpParams,byte[] bytes) throws Exception;\r\n    // 解析成列表\r\n    List parseList(BaseHttpParams baseHttpParams, String resultObj) throws Exception ;\r\n    // 解析成对象\r\n    Object parseObject(BaseHttpParams baseHttpParams,String resultObj) throws Exception ;\r\n    // 解析字符串\r\n    String parseDefault(BaseHttpParams baseHttpParams,String resultObj) throws Exception ;\r\n    // 解析组合模式返回值\r\n    Map<String,Object> parseCombination(BaseHttpParams baseHttpParams, String resultObj) throws Exception ;\r\n\r\n    // 检查数据是否失败  false 成功   true 解析失败\r\n    boolean isFail(final BaseHttpParams baseHttpParams,final BaseResult baseResult);\r\n    BaseErrorInfo getFailErrorInfo();\r\n\r\n    // 检查是否为空数据  false 不为空  true空数据\r\n    boolean isEmpty(final BaseHttpParams baseHttpParams,final BaseResult baseResult);\r\n    BaseErrorInfo getEmptyErrorInfo();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/data/IDataListener.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/data/IDataListener.java	(date 1608781011430)
@@ -1,34 +1,19 @@
 package com.xhttp.lib.interfaces.data;
 
-import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
 
-import org.json.JSONException;
+import com.xhttp.lib.model.BaseRequestResult;
+import com.xhttp.lib.params.BaseHttpParams;
 
-import java.util.List;
-import java.util.Map;
+import java.io.Serializable;
 
 /**
  * Created by lixingxing on 2019/3/26.
  */
-public interface IDataListener {
+public interface IDataListener extends Serializable {
     // 先处理一下返回值, 返回的内容应为接下来要解析的主体内容
-    String parseResult(BaseHttpParams baseHttpParams,byte[] bytes) throws Exception;
-    // 解析成列表
-    List parseList(BaseHttpParams baseHttpParams, String resultObj) throws Exception ;
-    // 解析成对象
-    Object parseObject(BaseHttpParams baseHttpParams,String resultObj) throws Exception ;
-    // 解析字符串
-    String parseDefault(BaseHttpParams baseHttpParams,String resultObj) throws Exception ;
-    // 解析组合模式返回值
-    Map<String,Object> parseCombination(BaseHttpParams baseHttpParams, String resultObj) throws Exception ;
+    String parseResult(@NotNull final BaseHttpParams baseHttpParams, @NotNull final BaseRequestResult baseRequestResult);
 
-    // 检查数据是否失败  false 成功   true 解析失败
-    boolean isFail(final BaseHttpParams baseHttpParams,final BaseResult baseResult);
-    BaseErrorInfo getFailErrorInfo();
 
-    // 检查是否为空数据  false 不为空  true空数据
-    boolean isEmpty(final BaseHttpParams baseHttpParams,final BaseResult baseResult);
-    BaseErrorInfo getEmptyErrorInfo();
+    // 检查数据是否成功  false 失败  true 成功
+    boolean isSuccess(@NotNull final BaseHttpParams baseHttpParams,final String result);
 }
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/data/IDataListenerFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.data;\r\n\r\n/**\r\n * Created by lixingxing on 2019/4/29.\r\n */\r\npublic interface IDataListenerFilter {\r\n    void filterIDataListener(IDataListener iDataListener);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/data/IDataListenerFilter.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/data/IDataListenerFilter.java	(date 1576829316242)
@@ -1,8 +1,13 @@
 package com.xhttp.lib.interfaces.data;
 
+import org.jetbrains.annotations.NotNull;
+
+import java.io.Serializable;
+
 /**
  * Created by lixingxing on 2019/4/29.
  */
-public interface IDataListenerFilter {
-    void filterIDataListener(IDataListener iDataListener);
+public interface IDataListenerFilter extends Serializable {
+    @NotNull
+    IDataListener filterIDataListener(IDataListener iDataListener);
 }
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/file/IFileService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.file;\r\n\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.interfaces.callback.IFileUploadListener;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\n\r\n/**\r\n * 网络请求处理\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic interface IFileService {\r\n     // 上传file\r\n     BaseRequestResult uploadFile(BaseHttpParams baseHttpParams,final IFileUploadListener fileUploadListener);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/file/IFileService.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/file/IFileService.java	(date 1576826116396)
@@ -1,8 +1,8 @@
 package com.xhttp.lib.interfaces.file;
 
-import com.xhttp.lib.config.BaseHttpParams;
 import com.xhttp.lib.interfaces.callback.IFileUploadListener;
 import com.xhttp.lib.model.BaseRequestResult;
+import com.xhttp.lib.params.BaseHttpParams;
 
 /**
  * 网络请求处理
@@ -10,5 +10,5 @@
  */
 public interface IFileService {
      // 上传file
-     BaseRequestResult uploadFile(BaseHttpParams baseHttpParams,final IFileUploadListener fileUploadListener);
+     BaseRequestResult uploadFile(BaseHttpParams baseHttpParams, final IFileUploadListener fileUploadListener);
 }
Index: lib_http/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.library'\r\napply plugin: 'com.github.dcendents.android-maven'\r\ngroup='com.github.Lixingxing1992'\r\n\r\nandroid {\r\n    compileSdkVersion 28\r\n    defaultConfig {\r\n        minSdkVersion 19\r\n        targetSdkVersion 28\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n\r\n}\r\n\r\ndependencies {\r\n    implementation fileTree(include: ['*.jar'], dir: 'libs')\r\n    // gson 解析json\r\n    api \"com.google.code.gson:gson:2.8.2\"\r\n}\r\n\r\n// 指定编码\r\ntasks.withType(JavaCompile) {\r\n    options.encoding = \"UTF-8\"\r\n}\r\n\r\n// 打包源码\r\ntask sourcesJar(type: Jar) {\r\n    from android.sourceSets.main.java.srcDirs\r\n    classifier = 'sources'\r\n}\r\n\r\ntask javadoc(type: Javadoc) {\r\n    failOnError  false\r\n    source = android.sourceSets.main.java.sourceFiles\r\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\r\n    classpath += configurations.compile\r\n}\r\n\r\n// 制作文档(Javadoc)\r\ntask javadocJar(type: Jar, dependsOn: javadoc) {\r\n    classifier = 'javadoc'\r\n    from javadoc.destinationDir\r\n}\r\n\r\nartifacts {\r\n    archives sourcesJar\r\n    archives javadocJar\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/build.gradle	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/build.gradle	(date 1608780984652)
@@ -1,6 +1,6 @@
 apply plugin: 'com.android.library'
 apply plugin: 'com.github.dcendents.android-maven'
-group='com.github.Lixingxing1992'
+//group='com.github.Lixingxing1992'
 
 android {
     compileSdkVersion 28
@@ -24,6 +24,7 @@
     implementation fileTree(include: ['*.jar'], dir: 'libs')
     // gson 解析json
     api "com.google.code.gson:gson:2.8.2"
+    implementation 'org.jetbrains:annotations-java5:15.0'
 }
 
 // 指定编码
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/message/IMessageManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.message;\r\n\r\nimport android.content.Context;\r\n\r\n/**\r\n * 展示提示的工具类\r\n * Created by lixingxing on 2019/4/9.\r\n */\r\npublic interface IMessageManager {\r\n    void showMessages(Context context,String msg);\r\n    void showErrorMessages(Context context,String msg);\r\n    void showEmptyMessages(Context context,String msg);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/message/IMessageManager.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/message/IMessageManager.java	(date 1576752105947)
@@ -7,7 +7,7 @@
  * Created by lixingxing on 2019/4/9.
  */
 public interface IMessageManager {
-    void showMessages(Context context,String msg);
-    void showErrorMessages(Context context,String msg);
-    void showEmptyMessages(Context context,String msg);
+    void showMessages(Context context, String msg);
+    void showErrorMessages(Context context, String msg);
+    void showEmptyMessages(Context context, String msg);
 }
Index: lib_http/src/main/java/com/xhttp/lib/params/BaseHttpParams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/params/BaseHttpParams.java	(date 1577254281059)
+++ lib_http/src/main/java/com/xhttp/lib/params/BaseHttpParams.java	(date 1577254281059)
@@ -0,0 +1,63 @@
+package com.xhttp.lib.params;
+
+import android.content.Context;
+import android.util.Pair;
+import com.xhttp.lib.config.BaseHttpConfig;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * 请求参数封装
+ * Created by lixingxing
+ */
+public class BaseHttpParams {
+
+    public Context mContext;
+
+    public String tags = "";
+
+    // Log日志开关
+    public boolean openLog = true;
+    // 请求地址
+    public String url;
+
+    public Object params = "";
+    // 参数
+    public List<Pair<String,Object>> paramsList = new ArrayList<>();
+
+    // 请求方式 默认 post提交
+    public BaseHttpConfig.RequestType request_type = BaseHttpConfig.RequestType.POST;
+    // 请求头 Content-Type
+    public BaseHttpConfig.RequestContentType request_contentType = BaseHttpConfig.RequestContentType.FORM;
+
+    // 连接超时时间
+    public int timeout_connect = 1*60*1000;
+    // 读取数据超时时间
+    public int timeout_read = 1*60*1000;
+
+    // 返回值解析类型
+    public Class aClass;
+
+    // 返回值解析模式 默认是String
+    public BaseHttpConfig.DataParseType dataParseType = BaseHttpConfig.DataParseType.String;
+
+
+    /**** file 上传相关 ****/
+    public List<File> fileList = new ArrayList<>();
+    public List<String>  fileKeys = new ArrayList<>();
+    // 上传结束后是否删除
+    public boolean isDelete = false;
+
+
+
+    public BaseHttpParams(BaseHttpInitParams baseHttpInitParams){
+        this.mContext = baseHttpInitParams.mContext;
+        this.openLog = baseHttpInitParams.mOpenLog;
+        this.timeout_connect = baseHttpInitParams.connectTimeOut;
+        this.timeout_read = baseHttpInitParams.readTimeOut;
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/params/BaseHttpInitParams.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/params/BaseHttpInitParams.java	(date 1577103532853)
+++ lib_http/src/main/java/com/xhttp/lib/params/BaseHttpInitParams.java	(date 1577103532853)
@@ -0,0 +1,86 @@
+package com.xhttp.lib.params;
+
+import android.content.Context;
+import com.xhttp.lib.impl.data.DefaultDataListener;
+import com.xhttp.lib.impl.service.DefaultHttpService;
+import com.xhttp.lib.interfaces.data.IDataListener;
+import com.xhttp.lib.interfaces.data.IDataListenerFilter;
+import com.xhttp.lib.interfaces.http.IHttpService;
+import com.xhttp.lib.interfaces.http.IHttpServiceFilter;
+import com.xhttp.lib.interfaces.message.IMessageManager;
+import com.xhttp.lib.rquest.BaseHttpRequestUtils;
+
+/**
+ * 全局设置的参数（在使用中会优先使用独立设置的参数）
+ * @author Lixingxing
+ */
+public class BaseHttpInitParams {
+     private BaseHttpInitParams(){
+
+     }
+     public BaseHttpInitParams(Context context){
+         this.mContext = context;
+         mHttpService = new DefaultHttpService();
+         mDataListener = new DefaultDataListener();
+     }
+
+    // 全局上下文
+    public Context mContext;
+    // 是否打开Log日志
+    public boolean mOpenLog = true;
+
+    // 请求超时时间
+    public int connectTimeOut = 1 * 60 * 1000;
+
+    // 读取超时时间
+    public int readTimeOut = 12 * 1000;
+
+    public IHttpService mHttpService;
+    public IDataListener mDataListener;
+    public IMessageManager mMessageManager;
+
+    public IHttpServiceFilter mHttpServiceFilter;
+    public IDataListenerFilter mDataListenerFilter;
+
+    // 设置上下文
+    public BaseHttpInitParams setContext(Context mContext){
+        this.mContext = mContext;
+        return this;
+    }
+    // 设置log开关
+    public BaseHttpInitParams setOpenLog(boolean mOpenLog) {
+        this.mOpenLog = mOpenLog;
+        return this;
+    }
+
+    public void setConnectTimeOut(int connectTimeOut) {
+        this.connectTimeOut = connectTimeOut;
+    }
+
+    public void setReadTimeOut(int readTimeOut) {
+        this.readTimeOut = readTimeOut;
+    }
+
+    // 设置请求工具类
+    public BaseHttpInitParams setIHttpService(IHttpService mHttpService) {
+        this.mHttpService = mHttpService;
+        return this;
+    }
+    // 设置数据解析工具类
+    public BaseHttpInitParams setIDataListener(IDataListener mDataListener) {
+        this.mDataListener = mDataListener;
+        return this;
+    }
+    // 设置请求工具类 过滤器
+    public void setIHttpServiceFilter(IHttpServiceFilter mHttpServiceFilter) {
+        this.mHttpServiceFilter = mHttpServiceFilter;
+    }
+    // 设置数据解析工具类 过滤器
+    public void setIDataListenerFilter(IDataListenerFilter mDataListenerFilter) {
+        this.mDataListenerFilter = mDataListenerFilter;
+    }
+    // 设置返回值提示工具类
+    public void setIMessageManager(IMessageManager mMessageManager) {
+        this.mMessageManager = mMessageManager;
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/http/IHttpService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.http;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\n\r\n/**\r\n * 网络请求处理\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic interface IHttpService {\r\n    // 处理参数  get请求下这个方法不使用\r\n    Object parseParams(BaseHttpParams baseHttpParams);\r\n    /**\r\n     * 返回 BaseRequestResult必须符合下面的条件\r\n     *\r\n     * 1.如果 请求成功,成功获取到返回值\r\n     *      BaseRequestResult.isSuccess = true\r\n     *      BaseRequestResult.responseCode = 200\r\n     *      BaseRequestResult.byte != null && BaseRequestResult.byte.length() != 0\r\n     * 2.如果 请求失败,有异常信息\r\n     *      BaseRequestResult.isSuccess = false\r\n     *      BaseRequestResult.errorInfo != null\r\n     * @param baseHttpParams\r\n     */\r\n     BaseRequestResult request(BaseHttpParams baseHttpParams);\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/http/IHttpService.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/http/IHttpService.java	(date 1577255080718)
@@ -1,17 +1,23 @@
 package com.xhttp.lib.interfaces.http;
 
-import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
+import android.util.Pair;
 import com.xhttp.lib.model.BaseRequestResult;
+import com.xhttp.lib.params.BaseHttpParams;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.Serializable;
+import java.util.List;
 
 /**
  * 网络请求处理
  * Created by lixingxing on 2019/3/26.
  */
-public interface IHttpService {
+public interface IHttpService extends Serializable {
     // 处理参数  get请求下这个方法不使用
-    Object parseParams(BaseHttpParams baseHttpParams);
+    Object parseParams(List<Pair<String,Object>> params);
+
+    // 返回请求参数的描述(用于log日志中参数的显示）
+    String getRequestParamsDesc(Object params);
     /**
      * 返回 BaseRequestResult必须符合下面的条件
      *
@@ -24,6 +30,6 @@
      *      BaseRequestResult.errorInfo != null
      * @param baseHttpParams
      */
-     BaseRequestResult request(BaseHttpParams baseHttpParams);
+     @NotNull BaseRequestResult request(BaseHttpParams baseHttpParams);
 
 }
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/http/IHttpServiceFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.http;\r\n\r\n/**\r\n * Created by lixingxing on 2019/4/29.\r\n */\r\npublic interface IHttpServiceFilter {\r\n    void filterIHttpService(IHttpService iHttpService);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/http/IHttpServiceFilter.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/http/IHttpServiceFilter.java	(date 1576829291497)
@@ -1,8 +1,13 @@
 package com.xhttp.lib.interfaces.http;
 
+import org.jetbrains.annotations.NotNull;
+
+import java.io.Serializable;
+
 /**
  * Created by lixingxing on 2019/4/29.
  */
-public interface IHttpServiceFilter {
-    void filterIHttpService(IHttpService iHttpService);
+public interface IHttpServiceFilter extends Serializable {
+    @NotNull
+    IHttpService filterIHttpService(IHttpService iHttpService);
 }
Index: lib_http/src/main/java/com/xhttp/lib/rquest/BaseHttpRequestUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/rquest/BaseHttpRequestUtils.java	(date 1577107542431)
+++ lib_http/src/main/java/com/xhttp/lib/rquest/BaseHttpRequestUtils.java	(date 1577107542431)
@@ -0,0 +1,40 @@
+package com.xhttp.lib.rquest;
+
+import com.xhttp.lib.BaseResult;
+import com.xhttp.lib.config.BaseHttpConfig;
+import com.xhttp.lib.interfaces.callback.IHttpResultCallBack;
+import com.xhttp.lib.interfaces.data.IDataListener;
+import com.xhttp.lib.interfaces.http.IHttpService;
+import com.xhttp.lib.model.BaseRequestResult;
+import com.xhttp.lib.params.BaseHttpInitParams;
+import com.xhttp.lib.params.BaseHttpParams;
+import com.xhttp.lib.util.BaseHttpCheckUtils;
+import com.xhttp.lib.util.BaseLogUtils;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * @author Lixingxing
+ */
+public class BaseHttpRequestUtils {
+    @NotNull
+    private BaseHttpParams mBaseHttpParams;
+
+    public BaseHttpRequestUtils(@NotNull final BaseHttpParams baseHttpParams){
+        this.mBaseHttpParams = baseHttpParams;
+    }
+
+    /**
+     * 请求方法
+     */
+    public BaseRequestResult request(Object paramsStr){
+        BaseRequestResult baseRequestResult =
+                new RequestUtil(mBaseHttpParams)
+                        .Request_ContentType(mBaseHttpParams.request_contentType.toString())
+                        .Request_requestType(mBaseHttpParams.request_type)
+                        .Reqeust_ConnectTimeOut(mBaseHttpParams.timeout_connect)
+                        .Reqeust_ReadTimeOut(mBaseHttpParams.timeout_read)
+                        .request(paramsStr.toString(), mBaseHttpParams.url);
+        return baseRequestResult;
+    }
+
+}
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/callback/IHttpResultCallBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.callback;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic interface IHttpResultCallBack {\r\n    // 请求发出之前\r\n    void onBeforeRequest(BaseHttpParams baseHttpParams);\r\n    // 调用方式失败\r\n    void onFailUse(BaseErrorInfo errorInfo);\r\n\r\n    // 开始进行请求\r\n    void onRequest(BaseHttpParams baseHttpParams);\r\n    // 请求成功\r\n    void onFailRequest(BaseErrorInfo errorInfo);\r\n\r\n    // 解析返回值之前(必须请求成功)\r\n    void onBeforeDataParse(BaseHttpParams baseHttpParams, BaseResult baseResult);\r\n\r\n    // 解析成功 -- 整个请求过程成功\r\n    void onSuccess(BaseResult baseResult);\r\n\r\n    // 空数据\r\n    void onEmpty(BaseErrorInfo errorInfo);\r\n\r\n    // 错误信息\r\n    void onFail(BaseErrorInfo errorInfo);\r\n\r\n    // 最终执行\r\n    void onFinal(BaseResult baseResult);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/callback/IHttpResultCallBack.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/callback/IHttpResultCallBack.java	(date 1577251853428)
@@ -1,8 +1,8 @@
 package com.xhttp.lib.interfaces.callback;
 
 import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
+import com.xhttp.lib.model.BaseErrorInfo;
+import com.xhttp.lib.params.BaseHttpParams;
 
 /**
  * Created by lixingxing on 2019/3/26.
@@ -10,23 +10,10 @@
 public interface IHttpResultCallBack {
     // 请求发出之前
     void onBeforeRequest(BaseHttpParams baseHttpParams);
-    // 调用方式失败
-    void onFailUse(BaseErrorInfo errorInfo);
-
-    // 开始进行请求
-    void onRequest(BaseHttpParams baseHttpParams);
-    // 请求成功
-    void onFailRequest(BaseErrorInfo errorInfo);
-
-    // 解析返回值之前(必须请求成功)
-    void onBeforeDataParse(BaseHttpParams baseHttpParams, BaseResult baseResult);
 
     // 解析成功 -- 整个请求过程成功
     void onSuccess(BaseResult baseResult);
 
-    // 空数据
-    void onEmpty(BaseErrorInfo errorInfo);
-
     // 错误信息
     void onFail(BaseErrorInfo errorInfo);
 
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectModuleManager\">\r\n    <modules>\r\n      <module fileurl=\"file://$PROJECT_DIR$/XBaseHttpUtils.iml\" filepath=\"$PROJECT_DIR$/XBaseHttpUtils.iml\" />\r\n      <module fileurl=\"file://$PROJECT_DIR$/app/app.iml\" filepath=\"$PROJECT_DIR$/app/app.iml\" />\r\n      <module fileurl=\"file://$PROJECT_DIR$/lib_http/lib_http.iml\" filepath=\"$PROJECT_DIR$/lib_http/lib_http.iml\" />\r\n    </modules>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ .idea/modules.xml	(date 1608780029386)
@@ -2,9 +2,9 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/XBaseHttpUtils.iml" filepath="$PROJECT_DIR$/XBaseHttpUtils.iml" />
-      <module fileurl="file://$PROJECT_DIR$/app/app.iml" filepath="$PROJECT_DIR$/app/app.iml" />
-      <module fileurl="file://$PROJECT_DIR$/lib_http/lib_http.iml" filepath="$PROJECT_DIR$/lib_http/lib_http.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/XBaseHttpUtils.iml" filepath="$PROJECT_DIR$/.idea/modules/XBaseHttpUtils.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/app/XBaseHttpUtils.app.iml" filepath="$PROJECT_DIR$/.idea/modules/app/XBaseHttpUtils.app.iml" />
+      <module fileurl="file://$PROJECT_DIR$/.idea/modules/lib_http/XBaseHttpUtils.lib_http.iml" filepath="$PROJECT_DIR$/.idea/modules/lib_http/XBaseHttpUtils.lib_http.iml" />
     </modules>
   </component>
 </project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/jarRepositories.xml	(date 1608780029406)
+++ .idea/jarRepositories.xml	(date 1608780029406)
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="BintrayJCenter" />
+      <option name="name" value="BintrayJCenter" />
+      <option name="url" value="https://jcenter.bintray.com/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="maven" />
+      <option name="name" value="maven" />
+      <option name="url" value="https://jitpack.io" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="Google" />
+      <option name="name" value="Google" />
+      <option name="url" value="https://dl.google.com/dl/android/maven2/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="D:\kaifa\Android_SDK\extras\m2repository" />
+      <option name="name" value="D:\kaifa\Android_SDK\extras\m2repository" />
+      <option name="url" value="file:/$PROJECT_DIR$/../../../Android_SDK/extras/m2repository/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="D:\kaifa\Android_SDK\extras\android\m2repository" />
+      <option name="name" value="D:\kaifa\Android_SDK\extras\android\m2repository" />
+      <option name="url" value="file:/$PROJECT_DIR$/../../../Android_SDK/extras/android/m2repository/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="D:\kaifa\Android_SDK\extras\google\m2repository" />
+      <option name="name" value="D:\kaifa\Android_SDK\extras\google\m2repository" />
+      <option name="url" value="file:/$PROJECT_DIR$/../../../Android_SDK/extras/google/m2repository/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"NullableNotNullManager\">\r\n    <option name=\"myDefaultNullable\" value=\"android.support.annotation.Nullable\" />\r\n    <option name=\"myDefaultNotNull\" value=\"android.support.annotation.NonNull\" />\r\n    <option name=\"myNullables\">\r\n      <value>\r\n        <list size=\"7\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.Nullable\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nullable\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"javax.annotation.CheckForNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.Nullable\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.Nullable\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.Nullable\" />\r\n          <item index=\"6\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNullable\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n    <option name=\"myNotNulls\">\r\n      <value>\r\n        <list size=\"6\">\r\n          <item index=\"0\" class=\"java.lang.String\" itemvalue=\"org.jetbrains.annotations.NotNull\" />\r\n          <item index=\"1\" class=\"java.lang.String\" itemvalue=\"javax.annotation.Nonnull\" />\r\n          <item index=\"2\" class=\"java.lang.String\" itemvalue=\"edu.umd.cs.findbugs.annotations.NonNull\" />\r\n          <item index=\"3\" class=\"java.lang.String\" itemvalue=\"android.support.annotation.NonNull\" />\r\n          <item index=\"4\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.NonNull\" />\r\n          <item index=\"5\" class=\"java.lang.String\" itemvalue=\"androidx.annotation.RecentlyNonNull\" />\r\n        </list>\r\n      </value>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ .idea/misc.xml	(date 1608779990388)
@@ -29,7 +29,7 @@
       </value>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: lib_http/src/main/java/com/xhttp/lib/interfaces/callback/IHttpFileResultCallBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.interfaces.callback;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\n\r\nimport java.io.File;\r\n\r\n/**\r\n * 文件上传回调\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic interface IHttpFileResultCallBack {\r\n    // 整个请求过程成功\r\n    void onSuccess(BaseResult baseResult);\r\n    // 错误信息\r\n    void onFail(BaseErrorInfo errorInfo);\r\n    // 空集合\r\n    void onEmpty(BaseErrorInfo errorInfo);\r\n    // 最终执行\r\n    void onFinal(BaseResult baseResult);\r\n\r\n    void onFileProgress(int position, File file, long curlenth, long total);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/interfaces/callback/IHttpFileResultCallBack.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/interfaces/callback/IHttpFileResultCallBack.java	(date 1576828478172)
@@ -1,8 +1,7 @@
 package com.xhttp.lib.interfaces.callback;
 
 import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
+import com.xhttp.lib.model.BaseErrorInfo;
 
 import java.io.File;
 
Index: lib_http/src/main/java/com/xhttp/lib/rquest/RequestUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/rquest/RequestUtil.java	(date 1577108901418)
+++ lib_http/src/main/java/com/xhttp/lib/rquest/RequestUtil.java	(date 1577108901418)
@@ -0,0 +1,370 @@
+package com.xhttp.lib.rquest;
+
+import com.xhttp.lib.config.BaseHttpConfig;
+import com.xhttp.lib.exceptions.BaseHttpUtilsError;
+import com.xhttp.lib.model.BaseErrorInfo;
+import com.xhttp.lib.model.BaseRequestResult;
+import com.xhttp.lib.params.BaseHttpParams;
+import org.jetbrains.annotations.NotNull;
+
+import java.io.*;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLConnection;
+import java.util.List;
+import java.util.UUID;
+
+/**
+ * 用于网络请求的类
+ * Created by lixingxing on 2019/3/27.
+ */
+public class RequestUtil {
+    private String successMsg = "";
+    public int timeOut = 12 * 1000;
+    public int connectTimeout = 12 * 1000;
+    private String requestType = "";
+    private String contentType = "";
+    private final String BOUNDARY = UUID.randomUUID().toString();
+    private final String PREFIX = "--";
+    private final String LINE_END = "\r\n";
+    private final String CHARSET = "utf-8";
+
+    BaseHttpParams baseHttpParams;
+
+    //    BaseResult baseResult;
+    public RequestUtil(BaseHttpParams baseHttpParams) {
+        this.baseHttpParams = baseHttpParams;
+//        this.baseResult = baseResult;
+    }
+
+    /**
+     * 设置请求提交方式
+     *
+     * @param paramType
+     */
+    public final RequestUtil Request_requestType(BaseHttpConfig.RequestType paramType) {
+        this.requestType = paramType.toString();
+        return this;
+    }
+
+    public final RequestUtil Request_requestType(String paramType) {
+        this.requestType = paramType;
+        return this;
+    }
+
+    /**
+     * 设置参数类型
+     *
+     * @param paramType
+     */
+    public final RequestUtil Request_ContentType(BaseHttpConfig.ParamType paramType) {
+        this.contentType = paramType.toString();
+        return this;
+    }
+
+    public final RequestUtil Request_ContentType(String paramType) {
+        this.contentType = paramType;
+        return this;
+    }
+
+    /**
+     * 设置超时时间
+     *
+     * @param timeOut
+     */
+    public final RequestUtil Reqeust_ConnectTimeOut(int timeOut) {
+        this.connectTimeout = timeOut;
+        return this;
+    }
+
+    public final RequestUtil Reqeust_ReadTimeOut(int timeOut) {
+        this.timeOut = timeOut;
+        return this;
+    }
+
+    @NotNull
+    public final synchronized BaseRequestResult request(String params, String urlPath) {
+        BaseRequestResult baseRequestResult = new BaseRequestResult();
+        BaseErrorInfo errorInfo = baseRequestResult.errorInfo;
+        try {
+            URL url = new URL(urlPath);
+            URLConnection connection = url.openConnection();
+            if (connection == null) {
+                throw new BaseHttpUtilsError("null cannot be cast to non-null type java.net.HttpURLConnection");
+            }
+            HttpURLConnection conn = (HttpURLConnection) connection;
+            conn.setRequestMethod(requestType);
+            if (requestType.equals("POST")) {
+                conn.setUseCaches(false);
+                conn.setDoOutput(true);
+                conn.setDoInput(true);
+                conn.setInstanceFollowRedirects(true);
+            }
+
+            conn.setConnectTimeout(this.connectTimeout);
+            conn.setReadTimeout(this.timeOut);
+            conn.setRequestProperty("Content-Type", contentType);
+            conn.setRequestProperty("Connection", "Keep-Alive");
+            conn.setRequestProperty("Charset", this.CHARSET);
+
+            byte[] resultBytes;
+
+            if (!requestType.equals("GET") && params != null) {
+                DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
+                dos.write(params.getBytes());
+                dos.flush();
+                dos.close();
+            }
+            int code = conn.getResponseCode();
+            baseRequestResult.responseCode = code;
+            if (code == 200) {
+                //获得服务器端输出流
+                InputStream inputStream = conn.getInputStream();
+                resultBytes = stream2bytes(inputStream);
+                if (resultBytes == null || resultBytes.length == 0) {
+                    baseRequestResult.isSuccess = false;
+                    baseRequestResult.responseCode = 200;
+                    errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpFail;
+                    errorInfo.errorMsg = "状态码200,但返回值为空";
+                    baseRequestResult.errorInfo = errorInfo;
+                } else {
+                    baseRequestResult.isSuccess = true;
+                    baseRequestResult.bytes = resultBytes;
+                }
+            } else {
+                baseRequestResult.isSuccess = false;
+                errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpErrorCode;
+                errorInfo.errorMsg = baseRequestResult.responseCode + "";
+                baseRequestResult.errorInfo = errorInfo;
+            }
+        } catch (Exception e) {
+            baseRequestResult.isSuccess = false;
+            baseRequestResult.responseCode = BaseHttpConfig.REQUEST_CODE_ERROR;
+            errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpException;
+            errorInfo.exception = e;
+            e.printStackTrace();
+        }
+        return baseRequestResult;
+    }
+
+    // 同步上传多张文件
+    public final synchronized BaseRequestResult uploadFileByFiles(final List<File> files, final List<String> fileKeys, final String loadUrl, RequestUtilFileListener requestUtilFileListener) {
+        if(requestUtilFileListener != null) {
+            this.requestUtilFileListener = requestUtilFileListener;
+        }
+        BaseRequestResult baseRequestResult = new BaseRequestResult();
+        BaseErrorInfo errorInfo = baseRequestResult.errorInfo;
+        errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_File_error;
+        try {
+            URL url = new URL(loadUrl);
+            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+            conn.setReadTimeout(this.timeOut);
+            conn.setConnectTimeout(connectTimeout);
+            conn.setDoInput(true);
+            conn.setDoOutput(true);
+            conn.setUseCaches(false);
+            conn.setRequestMethod("POST");
+            conn.setRequestProperty("Charset", CHARSET);
+            conn.setRequestProperty("connection", "keep-alive");
+            conn.setRequestProperty("user-agent",
+                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
+            conn.setRequestProperty("Content-Type", contentType + ";boundary="
+                    + BOUNDARY);
+            DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
+            StringBuffer sb = null;
+            String params = "";
+            byte[] resultBytes;
+            for (int i = 0; i < files.size(); i++) {
+                sb = new StringBuffer();
+                /**
+                 * 这里重点注意： name里面的值为服务器端需要key 只有这个key 才可以得到对应的文件
+                 * filename是文件的名字，包含后缀名的 比如:abc.png
+                 */
+                sb.append(PREFIX).append(BOUNDARY).append(LINE_END);
+                sb.append("Content-Disposition: form-data; name=\"" + fileKeys.get(i) + "\"; filename=\""
+                        + files.get(i).getName() + "\"" + LINE_END);
+                sb.append("Content-Type: application/octet-stream; charset=" + CHARSET + LINE_END);
+                sb.append(LINE_END);
+                params = sb.toString();
+                System.out.println(params);
+                dos.write(params.getBytes());
+                /**上传文件*/
+                InputStream is = new FileInputStream(files.get(i));
+                long total = is.available();
+                System.out.println("文件大小:"+total);
+                byte[] bytes = new byte[1024];
+                int len = 0;
+                int curLen = 0;
+                while ((len = is.read(bytes)) != -1) {
+                    curLen += len;
+                    dos.write(bytes, 0, len);
+
+                    if(requestUtilFileListener != null){
+                        requestUtilFileListener.onFileProgress(i,files.get(i),curLen,total);
+                    }
+                }
+                is.close();
+                dos.write(LINE_END.getBytes());
+            }
+            byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINE_END).getBytes();
+            dos.write(end_data);
+            dos.flush();
+            int code = conn.getResponseCode();
+            baseRequestResult.responseCode = code;
+            if (code == 200) {
+                //获得服务器端输出流
+                InputStream inputStream = conn.getInputStream();
+                resultBytes = stream2bytes(inputStream);
+                if (resultBytes == null || resultBytes.length == 0) {
+                    baseRequestResult.isSuccess = false;
+                    baseRequestResult.responseCode = 200;
+                    errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpFail;
+                    errorInfo.errorMsg = errorInfo.errorCode.toString();
+                    baseRequestResult.errorInfo = errorInfo;
+                } else {
+                    baseRequestResult.isSuccess = true;
+                    baseRequestResult.bytes = resultBytes;
+                }
+            } else {
+                baseRequestResult.isSuccess = false;
+                errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpErrorCode;
+                errorInfo.errorMsg = String.format(errorInfo.errorCode.toString(), baseRequestResult.responseCode);
+                baseRequestResult.errorInfo = errorInfo;
+            }
+        } catch (Exception e) {
+            baseRequestResult.isSuccess = false;
+            baseRequestResult.responseCode = BaseHttpConfig.REQUEST_CODE_ERROR;
+            // TODO 根据不同的异常异常返回不同的结果
+            errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_File_error;
+            errorInfo.exception = e;
+            e.printStackTrace();
+        }
+        return baseRequestResult;
+    }
+
+    // 上传单个文件  用于异步上传
+    public final synchronized BaseRequestResult uploadFileByFile(final int postion, final File file, final String fileKey, final String loadUrl, RequestUtilFileListener requestUtilFileListener) {
+        if(requestUtilFileListener != null) {
+            this.requestUtilFileListener = requestUtilFileListener;
+        }
+        BaseRequestResult baseRequestResult = new BaseRequestResult();
+        BaseErrorInfo errorInfo = baseRequestResult.errorInfo;
+        errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_File_error;
+        try {
+            URL url = new URL(loadUrl);
+            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
+            conn.setReadTimeout(this.timeOut);
+            conn.setConnectTimeout(connectTimeout);
+            conn.setDoInput(true);
+            conn.setDoOutput(true);
+            conn.setUseCaches(false);
+            conn.setRequestMethod("POST");
+            conn.setRequestProperty("Charset", CHARSET);
+            conn.setRequestProperty("connection", "keep-alive");
+            conn.setRequestProperty("user-agent",
+                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
+            conn.setRequestProperty("Content-Type", contentType + ";boundary="
+                    + BOUNDARY);
+            DataOutputStream dos = new DataOutputStream(conn.getOutputStream());
+            StringBuffer sb = null;
+            String params = "";
+            byte[] resultBytes;
+            sb = new StringBuffer();
+            /**
+             * 这里重点注意： name里面的值为服务器端需要key 只有这个key 才可以得到对应的文件
+             * filename是文件的名字，包含后缀名的 比如:abc.png
+             */
+            sb.append(PREFIX).append(BOUNDARY).append(LINE_END);
+            sb.append("Content-Disposition: form-data; name=\"" + fileKey + "\"; filename=\""
+                    + file.getName() + "\"" + LINE_END);
+            sb.append("Content-Type: application/octet-stream; charset=" + CHARSET + LINE_END);
+            sb.append(LINE_END);
+            params = sb.toString();
+            System.out.println(params);
+            dos.write(params.getBytes());
+            /**上传文件*/
+            InputStream is = new FileInputStream(file);
+            // 总大小
+            long total = is.available();
+            System.out.println("文件大小:"+total);
+            byte[] bytes = new byte[1024];
+            int len = 0;
+            int curLen = 0;
+            while ((len = is.read(bytes)) != -1) {
+                curLen += len;
+                dos.write(bytes, 0, len);
+                if(requestUtilFileListener != null){
+                    requestUtilFileListener.onFileProgress(postion,file,curLen,total);
+                }
+            }
+            is.close();
+            dos.write(LINE_END.getBytes());
+            byte[] end_data = (PREFIX + BOUNDARY + PREFIX + LINE_END).getBytes();
+            dos.write(end_data);
+            dos.flush();
+            int code = conn.getResponseCode();
+            baseRequestResult.responseCode = code;
+            if (code == 200) {
+                //获得服务器端输出流
+                InputStream inputStream = conn.getInputStream();
+                resultBytes = stream2bytes(inputStream);
+                if (resultBytes == null || resultBytes.length == 0) {
+                    baseRequestResult.isSuccess = false;
+                    baseRequestResult.responseCode = 200;
+                    errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpFail;
+                    errorInfo.errorMsg = errorInfo.errorCode.toString();
+                    baseRequestResult.errorInfo = errorInfo;
+                } else {
+                    baseRequestResult.isSuccess = true;
+                    baseRequestResult.bytes = resultBytes;
+                }
+            } else {
+                baseRequestResult.isSuccess = false;
+                errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_HttpErrorCode;
+                errorInfo.errorMsg = String.format(errorInfo.errorCode.toString(), baseRequestResult.responseCode);
+                baseRequestResult.errorInfo = errorInfo;
+            }
+        } catch (Exception e) {
+            baseRequestResult.isSuccess = false;
+            baseRequestResult.responseCode = BaseHttpConfig.REQUEST_CODE_ERROR;
+            // TODO 根据不同的异常异常返回不同的结果
+            errorInfo.errorCode = BaseHttpConfig.ErrorCode.Error_File_error;
+            errorInfo.exception = e;
+            e.printStackTrace();
+        }
+        return baseRequestResult;
+    }
+
+    /**
+     * 从流中读取数据到byte[]..
+     *
+     * @param inStream the in stream
+     * @return the byte[]
+     */
+    public synchronized byte[] stream2bytes(InputStream inStream) throws IOException {
+        byte[] buff = new byte[1024];
+        byte[] data = null;
+        try {
+            ByteArrayOutputStream swapStream = new ByteArrayOutputStream();
+            int read = 0;
+            while ((read = inStream.read(buff, 0, 100)) > 0) {
+                swapStream.write(buff, 0, read);
+            }
+            data = swapStream.toByteArray();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return data;
+    }
+
+    RequestUtilFileListener requestUtilFileListener;
+
+    public RequestUtil setRequestUtilFileListener(RequestUtilFileListener requestUtilFileListener) {
+        this.requestUtilFileListener = requestUtilFileListener;
+        return this;
+    }
+
+    public interface RequestUtilFileListener{
+        void onFileProgress(int position, File file, long curlenth, long total);
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/util/BaseObjectUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/util/BaseObjectUtils.java	(date 1576823139556)
+++ lib_http/src/main/java/com/xhttp/lib/util/BaseObjectUtils.java	(date 1576823139556)
@@ -0,0 +1,54 @@
+package com.xhttp.lib.util;
+
+import java.io.*;
+import java.util.List;
+
+/**
+ * 对象处理工具类
+ * @author Lixingxing
+ */
+public class BaseObjectUtils {
+    // 深拷贝(拷贝的对象要实现  Serializable）
+    @SuppressWarnings("unchecked")
+    public static <T extends Serializable> T clone(T obj){
+        T cloneObj = null;
+        try {
+            //写入字节流
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            ObjectOutputStream obs = new ObjectOutputStream(out);
+            obs.writeObject(obj);
+            obs.close();
+
+            //分配内存，写入原始对象，生成新对象
+            ByteArrayInputStream ios = new ByteArrayInputStream(out.toByteArray());
+            ObjectInputStream ois = new ObjectInputStream(ios);
+            //返回生成的新对象
+            cloneObj = (T) ois.readObject();
+            ois.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return cloneObj;
+    }
+
+    // 深拷贝
+    @SuppressWarnings("unchecked")
+    public static <T> List<T> cloneList(List<T> obj) {
+        List<T> dest = null;
+        try {
+            ByteArrayOutputStream out = new ByteArrayOutputStream();
+            ObjectOutputStream obs = new ObjectOutputStream(out);
+            obs.writeObject(obj);
+            obs.close();
+
+            ByteArrayInputStream ios = new ByteArrayInputStream(out.toByteArray());
+            ObjectInputStream ois = new ObjectInputStream(ios);
+
+            dest = (List<T>) ois.readObject();
+            ois.close();
+        }catch (Exception e){
+            e.printStackTrace();
+        }
+        return dest;
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/util/BaseHttpCheckUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/util/BaseHttpCheckUtils.java	(date 1577073455113)
+++ lib_http/src/main/java/com/xhttp/lib/util/BaseHttpCheckUtils.java	(date 1577073455113)
@@ -0,0 +1,51 @@
+package com.xhttp.lib.util;
+
+import com.xhttp.lib.exceptions.BaseHttpUtilsError;
+import com.xhttp.lib.interfaces.data.IDataListener;
+import com.xhttp.lib.interfaces.http.IHttpService;
+import com.xhttp.lib.params.BaseHttpInitParams;
+import com.xhttp.lib.params.BaseHttpParams;
+
+/**
+ * 检查用法是否正确
+ * @author Lixingxing
+ */
+public class BaseHttpCheckUtils {
+
+    /**
+     * 检查初始化方法有没有实现
+     * @param mBaseHttpInitParams
+     */
+    public static void checkInit(BaseHttpInitParams mBaseHttpInitParams) {
+        if(mBaseHttpInitParams == null){
+            throw new BaseHttpUtilsError("init(BaseHttpInitConfig baseHttpInitConfig) 方法未调用");
+        }
+        if(mBaseHttpInitParams.mContext == null){
+            throw new BaseHttpUtilsError("BaseHttpInitConfig中 Context 不能为空");
+        }
+    }
+
+
+    /**
+     * 请求开始前,检查符不符合调用要求
+     * @param baseHttpParams
+     */
+    public static void checkRequest(BaseHttpParams baseHttpParams) {
+        if(baseHttpParams == null){
+            throw new BaseHttpUtilsError("BaseHttpParams 不能为空");
+        }
+        if(baseHttpParams.url == null){
+            throw new BaseHttpUtilsError("BaseHttpParams url 不能为空");
+        }
+    }
+
+
+    public static void checkServiceAndDataparse(IHttpService httpService, IDataListener iDataListener){
+        if(httpService == null){
+            throw new BaseHttpUtilsError("请求工具类 IHttpService 不能为空");
+        }
+        if(iDataListener == null){
+            throw new BaseHttpUtilsError("解析工具类 DataListener 不能为空");
+        }
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/util/BaseThreadPoolUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/util/BaseThreadPoolUtils.java	(date 1576751349969)
+++ lib_http/src/main/java/com/xhttp/lib/util/BaseThreadPoolUtils.java	(date 1576751349969)
@@ -0,0 +1,76 @@
+package com.xhttp.lib.util;
+
+/**
+ * Created by Administrator on 2016/5/30.
+ */
+
+import java.util.concurrent.*;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * 线程池辅助类，整个应用程序就只有一个线程池去管理线程。
+ * 可以设置核心线程数、最大线程数、额外线程空状态生存时间，阻塞队列长度来优化线程池。
+ * 下面的数据都是参考Android的AsynTask里的数据。
+ *
+ * @author zet
+ *
+ */
+public class BaseThreadPoolUtils {
+
+    private BaseThreadPoolUtils() {
+    }
+
+    // 线程池核心线程数
+    private static int CORE_POOL_SIZE = 5;
+
+    // 线程池最大线程数
+    private static int MAX_POOL_SIZE = 100;
+
+    // 额外线程空状态生存时间
+    private static int KEEP_ALIVE_TIME = 8 * 1000;
+
+    // 阻塞队列。当核心线程都被占用，且阻塞队列已满的情况下，才会开启额外线程。
+    private static BlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<Runnable>(
+            10);
+
+
+    // 线程工厂
+    private static ThreadFactory threadFactory = new ThreadFactory() {
+        private final AtomicInteger integer = new AtomicInteger();
+
+        @Override
+        public Thread newThread(Runnable r) {
+            return new Thread(r, "myThreadPool thread:"
+                    + integer.getAndIncrement());
+        }
+    };
+    private static RejectedExecutionHandler rejectedExecutionHandler = new RejectedExecutionHandler() {
+        @Override
+        public void rejectedExecution(Runnable runnable, ThreadPoolExecutor threadPoolExecutor) {
+            //runnable 就是被丢出来的线程
+            try {
+                workQueue.put(runnable);
+            } catch (InterruptedException e) {
+                e.printStackTrace();
+            }
+        }
+    };
+
+    // 线程池
+    private static ThreadPoolExecutor threadPool;
+
+    static {
+        threadPool = new ThreadPoolExecutor(CORE_POOL_SIZE, MAX_POOL_SIZE,
+                KEEP_ALIVE_TIME, TimeUnit.SECONDS, workQueue, threadFactory,rejectedExecutionHandler);
+    }
+
+    /**
+     * 从线程池中抽取线程，执行指定的Runnable对象
+     *
+     * @param runnable
+     */
+    public static void execute(Runnable runnable) {
+        threadPool.execute(runnable);
+    }
+
+}
\ No newline at end of file
Index: lib_http/src/main/java/com/xhttp/lib/model/BaseErrorInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/model/BaseErrorInfo.java	(date 1577109211517)
+++ lib_http/src/main/java/com/xhttp/lib/model/BaseErrorInfo.java	(date 1577109211517)
@@ -0,0 +1,33 @@
+package com.xhttp.lib.model;
+
+import com.xhttp.lib.config.BaseHttpConfig;
+
+/**
+ * Created by lixingxing on 2019/3/27.
+ */
+public class BaseErrorInfo {
+
+    public BaseErrorInfo() {
+    }
+    // 错误码
+    public BaseHttpConfig.ErrorCode errorCode = BaseHttpConfig.ErrorCode.Error_UnknowError;
+    // 异常
+    public Exception exception;
+
+    // 错误信息描述
+    public String errorMsg = "";
+
+    @Override
+    public String toString() {
+        String errorDesc = "";
+        errorDesc = errorCode.toString();
+        if(errorMsg != null && !"".equals(errorMsg)){
+            errorDesc = errorDesc + "\n" + errorMsg;
+        }
+        // 有异常信息
+        if(exception!=null){
+            errorDesc =  errorDesc + "\n" + exception;
+        }
+        return errorDesc;
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/model/BaseRequestResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.model;\r\n\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpConfig;\r\n\r\n/**\r\n * 网络请求的返回值封装\r\n * Created by lixingxing on 2019/6/4.\r\n */\r\npublic class BaseRequestResult {\r\n    // 是否成功\r\n    public boolean isSuccess = false;\r\n\r\n    // 返回值 数组\r\n    public byte[] bytes;\r\n\r\n    // 网络连接码   200 成功  -1 结果为空 -2有异常信息\r\n    //请求返回连接码\r\n    public int responseCode = 200;\r\n\r\n    public BaseErrorInfo errorInfo = new BaseErrorInfo(BaseHttpConfig.ErrorCode.Error_UnknowHttpError\r\n            , BaseHttpConfig.ErrorCode.Error_UnknowHttpError.toString());\r\n\r\n    // 检查返回值是否符合条件\r\n    public boolean checkResult() {\r\n        // 成功的时候 必须 bytes 有值 且 responseCode == 200\r\n        if (isSuccess && bytes != null && responseCode == 200 && bytes.length != 0) {\r\n            return true;\r\n        }\r\n        // 失败的时候 必须有失败信息描述\r\n        if (!isSuccess && errorInfo != null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/model/BaseRequestResult.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/model/BaseRequestResult.java	(date 1577108803382)
@@ -1,6 +1,5 @@
 package com.xhttp.lib.model;
 
-import com.xhttp.lib.config.BaseErrorInfo;
 import com.xhttp.lib.config.BaseHttpConfig;
 
 /**
@@ -18,8 +17,7 @@
     //请求返回连接码
     public int responseCode = 200;
 
-    public BaseErrorInfo errorInfo = new BaseErrorInfo(BaseHttpConfig.ErrorCode.Error_UnknowHttpError
-            , BaseHttpConfig.ErrorCode.Error_UnknowHttpError.toString());
+    public BaseErrorInfo errorInfo = new BaseErrorInfo();
 
     // 检查返回值是否符合条件
     public boolean checkResult() {
Index: lib_http/src/main/java/com/xhttp/lib/util/BaseLogUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/util/BaseLogUtils.java	(date 1576832694275)
+++ lib_http/src/main/java/com/xhttp/lib/util/BaseLogUtils.java	(date 1576832694275)
@@ -0,0 +1,21 @@
+package com.xhttp.lib.util;
+
+import android.util.Log;
+
+/**
+ * 日志记录方法
+ * @author Lixingxing
+ */
+public class BaseLogUtils {
+
+    public static void logD(String TAGS,boolean openLog,String msg){
+        if(openLog){
+            Log.d(TAGS,msg);
+        }
+    }
+    public static void logE(String TAGS,boolean openLog,String msg){
+        if(openLog){
+            Log.e(TAGS,msg);
+        }
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/util/BaseDataUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/util/BaseDataUtils.java	(date 1576825896150)
+++ lib_http/src/main/java/com/xhttp/lib/util/BaseDataUtils.java	(date 1576825896150)
@@ -0,0 +1,58 @@
+package com.xhttp.lib.util;
+
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * 解析返回值
+ * Created by lixingxing on 2019/4/4.
+ */
+public class BaseDataUtils {
+    /**
+     * json解析成 List<T>列表对象,解析错误的话 为null
+     * @param jsonString
+     * @param clz
+     * @param <T>
+     */
+    public static <T> List<T> parseJsonToList(String jsonString, Class<T> clz) throws Exception{
+        List<T> list = new ArrayList<>();
+        JsonParser parser = new JsonParser();
+        try {
+            JsonArray Jarray = (JsonArray) parser.parse(jsonString);
+            for (JsonElement jsonElement : Jarray) {
+                T t = parseJsonToObject(jsonElement.toString(),clz);
+                if(t == null){
+                    list = null;
+                    break;
+                }else{
+                    list.add(t);
+                }
+            }
+        }catch (Exception e){
+            list = null;
+            throw e;
+        }
+        return list;
+    }
+    /**
+     * json解析成 T 对象,解析错误的话 为null
+     * @param jsonString
+     * @param clz
+     * @param <T>
+     */
+    public static <T> T parseJsonToObject(String jsonString, Class<T> clz) throws Exception{
+        T t = null;
+        Gson gson = new Gson();
+        try{
+            t = gson.fromJson(jsonString, clz);
+        }catch (Exception e){
+            throw e;
+        }
+        return t;
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/callback/HttpResultCallBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.callback;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.interfaces.callback.IHttpResultCallBack;\r\n\r\n/**\r\n * 回调抽象类,使用此回调可以不强制重写 onEmpty 和 onFinal\r\n * Created by lixingxing on 2019/3/27.\r\n */\r\npublic abstract class HttpResultCallBack implements IHttpResultCallBack {\r\n\r\n    public HttpResultCallBack(){\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBeforeRequest(BaseHttpParams baseHttpParams) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFailUse(BaseErrorInfo errorInfo) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onRequest(BaseHttpParams baseHttpParams) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFailRequest(BaseErrorInfo errorInfo) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onBeforeDataParse(BaseHttpParams baseHttpParams, BaseResult baseResult) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onEmpty(BaseErrorInfo errorInfo) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFail(BaseErrorInfo errorInfo) {\r\n    }\r\n\r\n    @Override\r\n    public void onFinal(BaseResult baseResult) {\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/callback/HttpResultCallBack.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/callback/HttpResultCallBack.java	(date 1577251956565)
@@ -1,9 +1,9 @@
 package com.xhttp.lib.callback;
 
 import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
 import com.xhttp.lib.interfaces.callback.IHttpResultCallBack;
+import com.xhttp.lib.model.BaseErrorInfo;
+import com.xhttp.lib.params.BaseHttpParams;
 
 /**
  * 回调抽象类,使用此回调可以不强制重写 onEmpty 和 onFinal
@@ -20,35 +20,6 @@
 
     }
 
-    @Override
-    public void onFailUse(BaseErrorInfo errorInfo) {
-
-    }
-
-    @Override
-    public void onRequest(BaseHttpParams baseHttpParams) {
-
-    }
-
-    @Override
-    public void onFailRequest(BaseErrorInfo errorInfo) {
-
-    }
-
-    @Override
-    public void onBeforeDataParse(BaseHttpParams baseHttpParams, BaseResult baseResult) {
-
-    }
-
-    @Override
-    public void onEmpty(BaseErrorInfo errorInfo) {
-
-    }
-
-    @Override
-    public void onFail(BaseErrorInfo errorInfo) {
-    }
-
     @Override
     public void onFinal(BaseResult baseResult) {
     }
Index: lib_http/src/main/java/com/xhttp/lib/callback/HttpFileResultCallBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.callback;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.interfaces.callback.IHttpFileResultCallBack;\r\n\r\nimport java.io.File;\r\n\r\n/**\r\n * Created by lixingxing on 2019/6/20.\r\n */\r\npublic abstract class HttpFileResultCallBack implements IHttpFileResultCallBack {\r\n    @Override\r\n    public void onFail(BaseErrorInfo errorInfo) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onEmpty(BaseErrorInfo errorInfo) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFinal(BaseResult baseResult) {\r\n\r\n    }\r\n\r\n    @Override\r\n    public void onFileProgress(int position, File file, long curlenth, long total) {\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/callback/HttpFileResultCallBack.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/callback/HttpFileResultCallBack.java	(date 1576828478128)
@@ -1,8 +1,8 @@
 package com.xhttp.lib.callback;
 
 import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
 import com.xhttp.lib.interfaces.callback.IHttpFileResultCallBack;
+import com.xhttp.lib.model.BaseErrorInfo;
 
 import java.io.File;
 
Index: lib_http/src/main/java/com/xhttp/lib/callback/HttpResultMessageCallBack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/callback/HttpResultMessageCallBack.java	(date 1577251949144)
+++ lib_http/src/main/java/com/xhttp/lib/callback/HttpResultMessageCallBack.java	(date 1577251949144)
@@ -0,0 +1,33 @@
+package com.xhttp.lib.callback;
+
+import android.app.Activity;
+import android.content.Context;
+import android.widget.Toast;
+import com.xhttp.lib.BaseResult;
+import com.xhttp.lib.interfaces.callback.IHttpResultCallBack;
+import com.xhttp.lib.model.BaseErrorInfo;
+import com.xhttp.lib.params.BaseHttpParams;
+
+import java.lang.ref.WeakReference;
+
+/**
+ * 回调抽象类 可以把错误提示toast出来
+ * Created by lixingxing on 2019/3/27.
+ */
+public abstract class HttpResultMessageCallBack implements IHttpResultCallBack {
+    private WeakReference<Activity> mContext;
+    public HttpResultMessageCallBack(Activity context){
+        this.mContext = new WeakReference<>(context);
+    }
+    @Override
+    public void onBeforeRequest(BaseHttpParams baseHttpParams) {
+
+    }
+    @Override
+    public void onFail(BaseErrorInfo errorInfo) {
+        Toast.makeText(mContext.get(),errorInfo.toString(),Toast.LENGTH_SHORT).show();
+    }
+    @Override
+    public void onFinal(BaseResult baseResult) {
+    }
+}
Index: lib_http/src/main/java/com/xhttp/lib/BaseResult.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib;\r\n\r\nimport com.xhttp.lib.config.BaseHttpConfig;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic class BaseResult {\r\n    public BaseResult(){}\r\n\r\n    // 是否成功\r\n    public boolean success = false;\r\n    // 是否是空数据  空数据的时候 success 应为true\r\n    public boolean isEmpty = false;\r\n\r\n    public BaseRequestResult baseRequestResult;\r\n    // 错误信息描述\r\n    public BaseErrorInfo errorInfo = new BaseErrorInfo();\r\n\r\n    public Result result;\r\n    public Result getResult(){\r\n        return result;\r\n    }\r\n    public static class Result{\r\n        // 全部的返回值\r\n        public String resultAll;\r\n        // 需要解析的返回值  例如 返回值是 {\"resCode\":0,\"resMsg\":\"aaa\",data:[]} resultData就是data后面的值\r\n        public String resultData;\r\n\r\n        // 根据解析类型解析出来的返回值\r\n        private Object result_object;\r\n        private List<Object> result_list = new ArrayList<>();\r\n        private String result_str;\r\n        private Map<String,Object> result_list_combination = new HashMap<>();\r\n\r\n        public <T> T getResult_object() {\r\n            if(result_object != null){\r\n                return (T)result_object;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public void setResult_object(Object result_object) {\r\n            this.result_object = result_object;\r\n        }\r\n\r\n        public <T> List<T> getResult_list() {\r\n            if(result_list != null){\r\n                return (List<T>)result_list;\r\n            }\r\n            return null;\r\n        }\r\n\r\n        public void setResult_list(List<Object> result_list) {\r\n            this.result_list = result_list;\r\n        }\r\n\r\n        public String getResult_str() {\r\n            return result_str;\r\n        }\r\n\r\n        public void setResult_str(String result_str) {\r\n            this.result_str = result_str;\r\n        }\r\n\r\n        public Map<String, Object> getResult_list_combination() {\r\n            return result_list_combination;\r\n        }\r\n\r\n        public void setResult_list_combination(Map<String, Object> result_list_combination) {\r\n            this.result_list_combination = result_list_combination;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/BaseResult.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/BaseResult.java	(date 1576825664658)
@@ -1,7 +1,6 @@
 package com.xhttp.lib;
 
-import com.xhttp.lib.config.BaseHttpConfig;
-import com.xhttp.lib.config.BaseErrorInfo;
+import com.xhttp.lib.model.BaseErrorInfo;
 import com.xhttp.lib.model.BaseRequestResult;
 
 import java.util.ArrayList;
Index: lib_http/src/main/java/com/xhttp/lib/exceptions/NoServiceOrDataError.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.exceptions;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/26.\r\n */\r\npublic class NoServiceOrDataError extends Exception{\r\n\r\n        public NoServiceOrDataError(){\r\n            super(\"未设置工具类\");\r\n        }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/exceptions/NoServiceOrDataError.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/exceptions/NoServiceOrDataError.java	(date 1576223134733)
@@ -4,7 +4,6 @@
  * Created by lixingxing on 2019/3/26.
  */
 public class NoServiceOrDataError extends Exception{
-
         public NoServiceOrDataError(){
             super("未设置工具类");
         }
Index: lib_http/src/main/java/com/xhttp/lib/config/BaseHttpConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.config;\r\n\r\n/**\r\n * Created by lixingxing on 2018/4/11.\r\n */\r\npublic class BaseHttpConfig {\r\n    public static final String TAG = \"BaseHttpUtils\";\r\n\r\n    public static final int REQUEST_CODE_SUCCESS = 0;\r\n    public static final int REQUEST_CODE_EMPTY = -1;\r\n    public static final int REQUEST_CODE_ERROR = -2;\r\n    //错误类型\r\n//    public enum ErrorType {\r\n//        Error_Use(\"框架使用错误\"),\r\n//        Error_Request(\"服务器请求失败\"),\r\n//        Error_Data(\"返回值解析失败\"),\r\n//        Error_Empty (\"未获取到数据\");\r\n//\r\n//        private String msg = \"\";\r\n//        ErrorType(String msg){\r\n//            this.msg = msg;\r\n//        }\r\n//        @Override\r\n//        public String toString() {\r\n//            return msg;\r\n//        }\r\n//    }\r\n\r\n    //错误代码\r\n    public enum ErrorCode {\r\n        Error_Success(\"请求成功\"),\r\n        Error_Use(\"调用方式错误,请仔细阅读使用说明\"),\r\n        Error_Params(\"因为程序原因导致参数传递错误\"),\r\n        Error_UnknowHttpError(\"未知错误导致请求失败\"),\r\n        Error_HttpErrorCode(\"网络请求返回码为 %s\"),\r\n        Error_HttpException(\"请求过程中出现异常\"),\r\n        Error_HttpExceptionTimeOut(\"服务器连接超时\"),\r\n        Error_HttpResponseNone(\"服务器返回结果为空,请联系系统管理员\"),\r\n        Error_HASNONEW(\"网络连接异常,请先检查您的网络配置\"),\r\n        Error_Result_Parsr_error(\"后台返回值解析异常\"),\r\n        Error_Result_Parsr_error_default(\"后台返回值提示错误\"),\r\n        Error_Result_none(\"未获取到数据\"),\r\n        Error_Result_error(\"获取数据失败\"),\r\n        Error_File_error(\"文件上传失败\");\r\n\r\n        private String msg = \"\";\r\n        ErrorCode(String msg){\r\n            this.msg = msg;\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return msg;\r\n        }\r\n    }\r\n\r\n\r\n    //请求方式类型\r\n    public enum RequestType {\r\n        POST(\"POST\"),\r\n        GET(\"GET\"),\r\n        FILE(\"FILE\");\r\n        private String msg = \"\";\r\n        RequestType(String msg){\r\n            this.msg = msg;\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return msg;\r\n        }\r\n    }\r\n    //请求参数类型\r\n    public enum ParamType {\r\n        DEFAULT(\"text/html;charset=UTF-8\"),\r\n        JSON(\"application/json\"),\r\n        XML(\"XML\"),\r\n        FILE(\"multipart/form-data\"),\r\n        String(\"text/html;charset=UTF-8\");\r\n\r\n        private String msg = \"\";\r\n        ParamType(String msg){\r\n            this.msg = msg;\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return msg;\r\n        }\r\n    }\r\n    //参数解析对象\r\n    public enum DataParseType {\r\n        List(\"List\"),\r\n        Object(\"Object\"),\r\n        String(\"String\"),\r\n        // 组合模式: 比如 多个字段+列表+对象等等\r\n        Combination(\"Combination\");\r\n        private String msg = \"\";\r\n        DataParseType(String msg){\r\n            this.msg = msg;\r\n        }\r\n        @Override\r\n        public String toString() {\r\n            return msg;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/config/BaseHttpConfig.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/config/BaseHttpConfig.java	(date 1577251231477)
@@ -1,64 +1,28 @@
 package com.xhttp.lib.config;
 
+
 /**
- * Created by lixingxing on 2018/4/11.
+ * 常量类
+ * @author Lixingxing
  */
 public class BaseHttpConfig {
-    public static final String TAG = "BaseHttpUtils";
+
+    public static final String TAGS = "BaseHttpUtils";
 
     public static final int REQUEST_CODE_SUCCESS = 0;
     public static final int REQUEST_CODE_EMPTY = -1;
     public static final int REQUEST_CODE_ERROR = -2;
-    //错误类型
-//    public enum ErrorType {
-//        Error_Use("框架使用错误"),
-//        Error_Request("服务器请求失败"),
-//        Error_Data("返回值解析失败"),
-//        Error_Empty ("未获取到数据");
-//
-//        private String msg = "";
-//        ErrorType(String msg){
-//            this.msg = msg;
-//        }
-//        @Override
-//        public String toString() {
-//            return msg;
-//        }
-//    }
-
-    //错误代码
-    public enum ErrorCode {
-        Error_Success("请求成功"),
-        Error_Use("调用方式错误,请仔细阅读使用说明"),
-        Error_Params("因为程序原因导致参数传递错误"),
-        Error_UnknowHttpError("未知错误导致请求失败"),
-        Error_HttpErrorCode("网络请求返回码为 %s"),
-        Error_HttpException("请求过程中出现异常"),
-        Error_HttpExceptionTimeOut("服务器连接超时"),
-        Error_HttpResponseNone("服务器返回结果为空,请联系系统管理员"),
-        Error_HASNONEW("网络连接异常,请先检查您的网络配置"),
-        Error_Result_Parsr_error("后台返回值解析异常"),
-        Error_Result_Parsr_error_default("后台返回值提示错误"),
-        Error_Result_none("未获取到数据"),
-        Error_Result_error("获取数据失败"),
-        Error_File_error("文件上传失败");
-
-        private String msg = "";
-        ErrorCode(String msg){
-            this.msg = msg;
-        }
-        @Override
-        public String toString() {
-            return msg;
-        }
-    }
 
 
     //请求方式类型
     public enum RequestType {
         POST("POST"),
         GET("GET"),
-        FILE("FILE");
+        PUT("PUT"),
+        DELETE("DELETE"),
+        HEAD("HEAD"),
+        OPTIONS("OPTIONS"),
+        PATCH("PATCH");
         private String msg = "";
         RequestType(String msg){
             this.msg = msg;
@@ -68,16 +32,17 @@
             return msg;
         }
     }
-    //请求参数类型
-    public enum ParamType {
-        DEFAULT("text/html;charset=UTF-8"),
+
+    // 返回参数编码类型
+    public enum RequestContentType{
+        FORM("application/x-www-form-urlencoded"),
         JSON("application/json"),
-        XML("XML"),
+        XML("application/xml"),
         FILE("multipart/form-data"),
-        String("text/html;charset=UTF-8");
-
+        Multipart("multipart/form-data; boundary= X_PAW_BOUNDARY"),
+        String("text/plain;charset=UTF-8");
         private String msg = "";
-        ParamType(String msg){
+        RequestContentType(String msg){
             this.msg = msg;
         }
         @Override
@@ -85,8 +50,9 @@
             return msg;
         }
     }
-    //参数解析对象
-    public enum DataParseType {
+
+    //解析数据方式
+    public enum DataParseType{
         List("List"),
         Object("Object"),
         String("String"),
@@ -101,4 +67,85 @@
             return msg;
         }
     }
+
+
+    //请求标题头参数
+    public enum ParamType {
+        DEFAULT("text/html;charset=UTF-8"),
+        JSON("application/json"),
+        XML("XML"),
+        FILE("multipart/form-data"),
+        String("text/html;charset=UTF-8");
+
+        private String msg = "";
+        ParamType(String msg){
+            this.msg = msg;
+        }
+        @Override
+        public String toString() {
+            return msg;
+        }
+    }
+
+    //结果类型
+    public enum ResultCode {
+        Result_Success("请求成功"),
+        Result_Error("出现异常信息"),
+        Result_FAIL("请求失败");
+        private String msg = "";
+        ResultCode(String msg){
+            this.msg = msg;
+        }
+        @Override
+        public String toString() {
+            return msg;
+        }
+    }
+
+//    public enum ErrorCode {
+//        Error_Success("请求成功"),
+//        Error_Use("调用方式错误,请仔细阅读使用说明"),
+//        Error_Params("因为程序原因导致参数传递错误"),
+//        Error_UnknowHttpError("未知错误导致请求失败"),
+//        Error_HttpErrorCode("网络请求返回码为 %s"),
+//        Error_HttpException("请求过程中出现异常"),
+//        Error_HttpExceptionTimeOut("服务器连接超时"),
+//        Error_HttpResponseNone("服务器返回结果为空,请联系系统管理员"),
+//        Error_HASNONEW("网络连接异常,请先检查您的网络配置"),
+//        Error_Result_Parsr_error("后台返回值解析异常"),
+//        Error_Result_Parsr_error_default("后台返回值提示错误"),
+//        Error_Result_none("未获取到数据"),
+//        Error_Result_error("获取数据失败"),
+//        Error_File_error("文件上传失败");
+//
+//        private String msg = "";
+//        ErrorCode(String msg){
+//            this.msg = msg;
+//        }
+//        @Override
+//        public String toString() {
+//            return msg;
+//        }
+//    }
+
+    // 错误类型
+    public enum ErrorCode{
+        Error_Success("请求成功"),
+        Error_Use("调用方式错误,请查看异常信息"),
+        Error_HttpErrorCode("网络请求错误,返回码为"),
+        Error_HttpException("请求过程中出现异常"),
+        Error_HttpFail("请求过程失败"),
+        Error_ResultFail("返回值解析失败"),
+        Error_UnknowError("未知错误导致本次请求失败"),
+        Error_File_error("文件上传失败");
+        private String msg = "";
+        ErrorCode(String msg) {
+            this.msg = msg;
+        }
+        @Override
+        public String toString() {
+            return msg;
+        }
+    }
+
 }
Index: lib_http/src/main/java/com/xhttp/lib/exceptions/BaseHttpUtilsError.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.exceptions;\r\n\r\n/**\r\n * Created by lixingxing on 2019/4/3.\r\n */\r\npublic class BaseHttpUtilsError extends Exception{\r\n    public BaseHttpUtilsError(String msg){\r\n        super(msg);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/exceptions/BaseHttpUtilsError.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/exceptions/BaseHttpUtilsError.java	(date 1576223962143)
@@ -3,9 +3,8 @@
 /**
  * Created by lixingxing on 2019/4/3.
  */
-public class BaseHttpUtilsError extends Exception{
+public class BaseHttpUtilsError extends RuntimeException{
     public BaseHttpUtilsError(String msg){
         super(msg);
     }
-
 }
Index: lib_http/src/main/java/com/xhttp/lib/impl/file/DefaultFileService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.impl.file;\r\n\r\nimport com.xhttp.lib.config.BaseHttpConfig;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.interfaces.callback.IFileUploadListener;\r\nimport com.xhttp.lib.interfaces.file.IFileService;\r\nimport com.xhttp.lib.model.BaseRequestResult;\r\nimport com.xhttp.lib.util.RequestUtil;\r\n\r\nimport java.io.File;\r\n\r\n/**\r\n * Created by lixingxing on 2019/6/20.\r\n */\r\npublic class DefaultFileService implements IFileService {\r\n    @Override\r\n    public BaseRequestResult uploadFile(BaseHttpParams baseHttpParams, final IFileUploadListener fileUploadListener) {\r\n        BaseRequestResult request = new RequestUtil(baseHttpParams)\r\n                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)\r\n                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)\r\n                .Request_ContentType(BaseHttpConfig.ParamType.FILE)\r\n                .Request_requestType(baseHttpParams.request_type)\r\n                .uploadFileByFiles(baseHttpParams.fileList,\r\n                        baseHttpParams.fileKeys,\r\n                        baseHttpParams.url,\r\n                        new RequestUtil.RequestUtilFileListener() {\r\n                            @Override\r\n                            public void onFileProgress(int position, File file, long curlenth, long total) {\r\n                                if(fileUploadListener != null){\r\n                                    fileUploadListener.onFileProgress(position,file,curlenth,total);\r\n                                }\r\n                            }\r\n                        });\r\n        return request;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/file/DefaultFileService.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/impl/file/DefaultFileService.java	(date 1576826107851)
@@ -1,11 +1,9 @@
 package com.xhttp.lib.impl.file;
 
-import com.xhttp.lib.config.BaseHttpConfig;
-import com.xhttp.lib.config.BaseHttpParams;
 import com.xhttp.lib.interfaces.callback.IFileUploadListener;
 import com.xhttp.lib.interfaces.file.IFileService;
 import com.xhttp.lib.model.BaseRequestResult;
-import com.xhttp.lib.util.RequestUtil;
+import com.xhttp.lib.params.BaseHttpParams;
 
 import java.io.File;
 
@@ -15,22 +13,22 @@
 public class DefaultFileService implements IFileService {
     @Override
     public BaseRequestResult uploadFile(BaseHttpParams baseHttpParams, final IFileUploadListener fileUploadListener) {
-        BaseRequestResult request = new RequestUtil(baseHttpParams)
-                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)
-                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)
-                .Request_ContentType(BaseHttpConfig.ParamType.FILE)
-                .Request_requestType(baseHttpParams.request_type)
-                .uploadFileByFiles(baseHttpParams.fileList,
-                        baseHttpParams.fileKeys,
-                        baseHttpParams.url,
-                        new RequestUtil.RequestUtilFileListener() {
-                            @Override
-                            public void onFileProgress(int position, File file, long curlenth, long total) {
-                                if(fileUploadListener != null){
-                                    fileUploadListener.onFileProgress(position,file,curlenth,total);
-                                }
-                            }
-                        });
-        return request;
+//        BaseRequestResult request = new RequestUtil(baseHttpParams)
+//                .Reqeust_ConnectTimeOut(baseHttpParams.timeout_connect)
+//                .Reqeust_ReadTimeOut(baseHttpParams.timeout_read)
+//                .Request_ContentType(BaseHttpConfig.ParamType.FILE)
+//                .Request_requestType(baseHttpParams.request_type)
+//                .uploadFileByFiles(baseHttpParams.fileList,
+//                        baseHttpParams.fileKeys,
+//                        baseHttpParams.url,
+//                        new RequestUtil.RequestUtilFileListener() {
+//                            @Override
+//                            public void onFileProgress(int position, File file, long curlenth, long total) {
+//                                if(fileUploadListener != null){
+//                                    fileUploadListener.onFileProgress(position,file,curlenth,total);
+//                                }
+//                            }
+//                        });
+        return null;
     }
 }
Index: lib_http/src/main/java/com/xhttp/lib/impl/message/MessageManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.impl.message;\r\n\r\nimport android.content.Context;\r\nimport android.widget.Toast;\r\n\r\nimport com.xhttp.lib.interfaces.message.IMessageManager;\r\n\r\n/**\r\n * 展示提示的工具类\r\n * Created by lixingxing on 2019/4/9.\r\n */\r\npublic class MessageManager implements IMessageManager {\r\n    @Override\r\n    public void showMessages(Context context, String msg) {\r\n        if (msg != null && !\"\".equals(msg)) {\r\n            Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void showErrorMessages(Context context, String msg) {\r\n        if (msg != null && !\"\".equals(msg)) {\r\n            Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void showEmptyMessages(Context context, String msg) {\r\n        if (msg != null && !\"\".equals(msg)) {\r\n            Toast.makeText(context, msg, Toast.LENGTH_SHORT).show();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/message/MessageManager.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/impl/message/MessageManager.java	(date 1576752106315)
@@ -2,7 +2,6 @@
 
 import android.content.Context;
 import android.widget.Toast;
-
 import com.xhttp.lib.interfaces.message.IMessageManager;
 
 /**
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(date 1608779990443)
+++ .idea/compiler.xml	(date 1608779990443)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: lib_http/src/main/java/com/xhttp/lib/impl/data/DefaultDataListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.xhttp.lib.impl.data;\r\n\r\nimport com.xhttp.lib.BaseResult;\r\nimport com.xhttp.lib.config.BaseErrorInfo;\r\nimport com.xhttp.lib.config.BaseHttpParams;\r\nimport com.xhttp.lib.interfaces.data.IDataListener;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\n/**\r\n * Created by lixingxing on 2019/3/27.\r\n */\r\npublic class DefaultDataListener implements IDataListener {\r\n    @Override\r\n    public String parseResult(BaseHttpParams baseHttpParams, byte[] bytes) throws Exception {\r\n        String results = new String(bytes);\r\n        return results;\r\n    }\r\n\r\n    @Override\r\n    public List parseList(BaseHttpParams baseHttpParams, String resultObj) throws Exception {\r\n        return new ArrayList();\r\n    }\r\n\r\n    @Override\r\n    public Object parseObject(BaseHttpParams baseHttpParams, String resultObj) throws Exception {\r\n        return resultObj;\r\n    }\r\n\r\n    @Override\r\n    public String parseDefault(BaseHttpParams baseHttpParams, String resultObj) throws Exception {\r\n        return resultObj;\r\n    }\r\n\r\n    @Override\r\n    public Map<String, Object> parseCombination(BaseHttpParams baseHttpParams, String resultObj) throws Exception {\r\n        return new HashMap<>();\r\n    }\r\n\r\n    @Override\r\n    public boolean isFail(BaseHttpParams baseHttpParams, BaseResult baseResult) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public BaseErrorInfo getFailErrorInfo() {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public boolean isEmpty(BaseHttpParams baseHttpParams, BaseResult baseResult) {\r\n        return false;\r\n    }\r\n\r\n    @Override\r\n    public BaseErrorInfo getEmptyErrorInfo() {\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- lib_http/src/main/java/com/xhttp/lib/impl/data/DefaultDataListener.java	(revision 071f925b463a080efd63fe2b712ecc71ef227263)
+++ lib_http/src/main/java/com/xhttp/lib/impl/data/DefaultDataListener.java	(date 1608781462159)
@@ -1,62 +1,23 @@
 package com.xhttp.lib.impl.data;
 
-import com.xhttp.lib.BaseResult;
-import com.xhttp.lib.config.BaseErrorInfo;
-import com.xhttp.lib.config.BaseHttpParams;
 import com.xhttp.lib.interfaces.data.IDataListener;
+import com.xhttp.lib.model.BaseRequestResult;
+import com.xhttp.lib.params.BaseHttpParams;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import org.jetbrains.annotations.NotNull;
 
 /**
  * Created by lixingxing on 2019/3/27.
  */
 public class DefaultDataListener implements IDataListener {
-    @Override
-    public String parseResult(BaseHttpParams baseHttpParams, byte[] bytes) throws Exception {
-        String results = new String(bytes);
-        return results;
-    }
-
-    @Override
-    public List parseList(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        return new ArrayList();
-    }
-
-    @Override
-    public Object parseObject(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        return resultObj;
-    }
 
     @Override
-    public String parseDefault(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        return resultObj;
+    public String parseResult(@NotNull BaseHttpParams baseHttpParams, @NotNull BaseRequestResult baseRequestResult) {
+        return new String(baseRequestResult.bytes);
     }
 
     @Override
-    public Map<String, Object> parseCombination(BaseHttpParams baseHttpParams, String resultObj) throws Exception {
-        return new HashMap<>();
-    }
-
-    @Override
-    public boolean isFail(BaseHttpParams baseHttpParams, BaseResult baseResult) {
-        return false;
-    }
-
-    @Override
-    public BaseErrorInfo getFailErrorInfo() {
-        return null;
-    }
-
-    @Override
-    public boolean isEmpty(BaseHttpParams baseHttpParams, BaseResult baseResult) {
-        return false;
-    }
-
-    @Override
-    public BaseErrorInfo getEmptyErrorInfo() {
-        return null;
+    public boolean isSuccess(@NotNull BaseHttpParams baseHttpParams, String result) {
+        return result != null;
     }
 }
